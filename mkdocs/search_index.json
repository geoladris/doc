{
    "docs": [
        {
            "location": "/", 
            "text": "Documentaci\u00f3n de Geoladris\n\n\nUsuario\n\n\n\n\nGu\u00eda r\u00e1pida\n.\n\n\nConfiguraci\u00f3n de aplicaciones\n.\n\n\nCreaci\u00f3n de aplicaciones\n.\n\n\nDescargas\n.\n\n\n\n\nDesarrollador\n\n\n\n\nGu\u00eda r\u00e1pida\n.\n\n\nC\u00f3digo fuente\n.\n\n\nEntorno de desarrollo\n.\n\n\nPlugins\n.\n\n\nAplicaciones\n.\n\n\nPublicaci\u00f3n\n.\n\n\nMigraci\u00f3n\n.\n\n\nContribuir\n.\n\n\n\n\nReferencia\n\n\n\n\nRegistro de cambios\n.\n\n\nPlugins\n.\n\n\nEventos\n.\n\n\nLicencia\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#documentacion-de-geoladris", 
            "text": "", 
            "title": "Documentaci\u00f3n de Geoladris"
        }, 
        {
            "location": "/#usuario", 
            "text": "Gu\u00eda r\u00e1pida .  Configuraci\u00f3n de aplicaciones .  Creaci\u00f3n de aplicaciones .  Descargas .", 
            "title": "Usuario"
        }, 
        {
            "location": "/#desarrollador", 
            "text": "Gu\u00eda r\u00e1pida .  C\u00f3digo fuente .  Entorno de desarrollo .  Plugins .  Aplicaciones .  Publicaci\u00f3n .  Migraci\u00f3n .  Contribuir .", 
            "title": "Desarrollador"
        }, 
        {
            "location": "/#referencia", 
            "text": "Registro de cambios .  Plugins .  Eventos .  Licencia .", 
            "title": "Referencia"
        }, 
        {
            "location": "/user/quickstart/", 
            "text": "Lo primero que hay que hacer es descargarse la aplicaci\u00f3n \ndemo\n y desplegarla en Tomcat:\n\n\ncurl https://repo1.maven.org/maven2/com/github/geoladris/apps/demo/7.0.0/demo-7.0.0.war \n \n$CATALINA_BASE\n/webapps/demo.war\n\n\n\n\n\nAccedemos al navegador para visualizarla: \nhttp://localhost:8080/demo/\n:\n\n\n\n\nAhora podemos probar a cambiar algo en el visor. Editamos el fichero \n$CATALINA_BASE/webapps/demo/WEB-INF/default_config/public-conf.json\n y modificamos lo siguiente:\n\n\n...\n\n\nlayer-order\n \n:\n \n{\n\n    \n_enabled\n \n:\n \ntrue\n\n\n}\n,\n\n\n...\n\n\n\n\n\n\nAcabamos de habilitar el plugin \nlayer-order\n. Si recargamos el visor:\n\n\n\n\ncomprobaremos que ha aparecido el plugin \nlayer-order\n en la barra de herramientas.\n\n\nA partir de aqu\u00ed podemos seguir \nconfigurando\n la aplicaci\u00f3n \ndemo\n o \ncrear\n una propia.", 
            "title": "Gu\u00eda r\u00e1pida"
        }, 
        {
            "location": "/user/config/", 
            "text": "Directorio de configuraci\u00f3n\n\n\nLas aplicaciones Geoladris se configuran mediante un directorio con ficheros de configuraci\u00f3n.\n\n\nEste directorio deber\u00e1 contener un subdirectorio por cada aplicaci\u00f3n desplegada. Por ejemplo, si se han desplegado las aplicaciones \ndemo.war\n y \nbosques.war\n, y \nGEOLADRIS_CONFIG_DIR\n se ha establecido a \n/var/geoladris\n, se utilizar\u00e1n los directorios \n/var/geoladris/demo\n y \n/var/geoladris/bosques\n para las aplicaciones \ndemo.war\n y \nbosques.war\n respectivamente.\n\n\nSi alguno de esos directorios no existe o si \nGEOLADRIS_CONFIG_DIR\n no se ha configurado correctamente, se utilizar\u00e1 el directorio por defecto para esa aplicaci\u00f3n concreta: \n$CATALINA_BASE/webapps/\napp\n/WEB-INF/default_config\n.\n\n\nPara configurar este directorio en Tomcat hay diferentes formas de hacerlo:\n\n\n\n\nVariable de entorno: \nexport GEOLADRIS_CONFIG_DIR=/var/geoladris\n.\n\n\nPropiedad Java: \n-DGEOLADRIS_CONFIG_DIR=/var/geoladris\n.\n\n\nPar\u00e1metro en \nweb.xml\n:\n\n\n\n\n    \ncontext-param\n\n        \nparam-name\nGEOLADRIS_CONFIG_DIR\n/param-name\n\n        \nparam-value\n/var/geoladris\n/param-value\n\n    \n/context-param\n\n\n\n\n\n\nA partir de ahora utilizaremos \nconfig_dir\n como el directorio de configuraci\u00f3n de una aplicaci\u00f3n.\n\n\nConfiguraci\u00f3n global\n\n\nLa configuraci\u00f3n global de la aplicaci\u00f3n se realiza con el fichero \nconfig_dir\n/public-conf.json\n. Es un fichero de texto que contiene un objeto JSON donde cada propiedad del objeto es el nombre del plugin a configurar y el valor es la configuraci\u00f3n del plugin.\n\n\nLa configuraci\u00f3n del plugin es a su vez otro objeto JSON. Cada propiedad es el nombre del m\u00f3dulo RequireJS a configurar y el valor es la configuraci\u00f3n del m\u00f3dulo, tal y como se puede obtener con \nmodule.config()\n.\n\n\nAparte existen las siguientes propiedades o psedo-m\u00f3dulos:\n\n\n\n\n_enabled\n: Activa (\ntrue\n) o desactiva (\nfalse\n) el plugin. Por defecto es \ntrue\n.\n\n\n_override\n: Sobreescribe (\ntrue\n) o mezcla (\nfalse\n) la configuraci\u00f3n por defecto del plugin. Por defecto es \nfalse\n.\n\n\n\n\nEjemplo:\n\n\n{\n\n  \nbase\n \n:\n \n{\n\n    \nbanner\n \n:\n \n{\n\n      \nhide\n \n:\n \ntrue\n,\n\n      \nshow-flag\n \n:\n \nfalse\n,\n\n      \nshow-logos\n \n:\n \nfalse\n\n    \n}\n\n  \n},\n\n  \nfootnote\n:\n \n{\n\n    \nfootnote\n:\n \n{\n\n      \ntext\n:\n \nfootnote.text\n,\n\n      \nlink\n:\n \nhttp://example.com\n,\n\n      \nalign\n:\n \ncenter\n\n    \n}\n\n  \n},\n\n  \nfeedback\n:\n \n{\n\n    \n_enabled\n \n:\n \nfalse\n\n  \n}\n\n\n}\n\n\n\n\n\n\nDe esta forma es posible no solo cambiar la configuraci\u00f3n de un plugin, sino tambi\u00e9n a\u00f1adir o eliminar plugins para un usuario concreto con la propiedad \n_enabled\n.\n\n\nAutenticaci\u00f3n y configuraci\u00f3n espec\u00edfica de usuario\n\n\nAdem\u00e1s de la configuraci\u00f3n global, se puede adaptadar la aplicaci\u00f3n en funci\u00f3n del usuario que accede a ella. Basta con a\u00f1adir un fichero \nconfig_dir\n/role_conf/\nrole\n.json\n por cada rol con su configuraci\u00f3n espec\u00edfica. El formato de estos ficheros es el mismo que el de \npublic-conf.json\n.\n\n\nPara mayor flexibilidad, la autenticaci\u00f3n es gestionada por los plugins. Actualmente en Geoladris existe un plugin \nauth\n encargado de la autenticaci\u00f3n. Para utilizarlo es necesario incluirlo en el momento de \ncrear\n la aplicaci\u00f3n.\n\n\nLa autenticaci\u00f3n de este plugin se apoya en la autenticaci\u00f3n del contenedor de servlets. Es decir, si se utiliza Tomcat, los usuarios de Geoladris ser\u00e1n aquellos que est\u00e1n configurados en Tomcat.\n\n\nPara configurar la autenticaci\u00f3n de Tomcat, lo m\u00e1s f\u00e1cil es editar el fichero \n$CATALINA_BASE/conf/tomcat-users.xml\n y a\u00f1adir los usuarios y roles que necesitemos. Por ejemplo:\n\n\ntomcat-users\n\n  \nrole\n \nrolename=\nviewer\n/\n\n  \nuser\n \nusername=\nuser\n \npassword=\npass\n \nroles=\nviewer\n/\n\n\n/tomcat-users\n\n\n\n\n\n\nAunque hay otras opciones de configuraci\u00f3n que se pueden encontrar en la \ndocumentaci\u00f3n oficial\n.\n\n\nUna vez se han configurado los usuarios, lo siguiente es restringir qu\u00e9 roles pueden acceder al visor. Para ello, basta con a\u00f1adir la propiedad \nauth.roles\n al fichero \nportal.properties\n del directorio de configuraci\u00f3n:\n\n\nauth.roles=viewer\n\n\n\n\n\nEsta propiedad es una lista de roles separada por comas. Los roles deben de coincidir con los roles definidos en Tomcat.\n\n\nPor \u00faltimo, para configurar el visor de manera espec\u00edfica para cada rol deberemos a\u00f1adir un fichero \nrole\n.json\n a \nconfig_dir\n/role_conf\n por cada rol definido en \nauth.roles\n.\n\n\nPor ejemplo, para habilitar los plugins \nlayer-order\n y \nlayers-editor\n en el rol \nviewer\n, habr\u00e1 que a\u00f1adir un fichero \nrole_conf/viewer.json\n con el siguiente contenido:\n\n\n{\n\n    \nlayer-order\n \n:\n \n{\n\n        \n_enabled\n \n:\n \ntrue\n\n    \n},\n\n    \nlayers-editor\n \n:\n \n{\n\n        \n_enabled\n \n:\n \ntrue\n\n    \n}\n\n\n}\n\n\n\n\n\n\nTraducciones\n\n\nCon Geoladris se pueden configurar las cadenas de texto que aparecen en el visor e incluso escribirlas en diferentes idiomas.\n\n\nPara ello, basta con crear un directorio \nconfig_dir\n/messages\n que contenga ficheros \nmessages_\nlang\n.properties\n. \nlang\n es el c\u00f3digo del idioma seg\u00fan la nomenclatura \nISO 639-1\n de dos letras.\n\n\nPor ejemplo, para tener traducciones en ingl\u00e9s y espa\u00f1ol habr\u00eda que crear los ficheros \nmessages_en.properties\n y \nmessages_es.properties\n. Adem\u00e1s, existe un fichero \nmessages.properties\n (sin el sufijo del idioma) con las traducciones por defecto, que puede ser una copia de los anteriores.\n\n\nUn ejemplo de fichero de traducciones:\n\n\n...\nbase_layers=Capas Base\ncancel=Cancelar\nchart=Gr\\u00e1fico\ndata_source=Fuente de datos\n...\n\n\n\n\n\nGeoladris reconoce las siguientes traducciones:\n\n\n\n\ntitle\n: T\u00edtulo de la p\u00e1gina HTML.\n\n\n\n\nAparte, cada plugin define sus propias traducciones. Para ver qu\u00e9 traducciones hay disponibles, ver \nreferencia\n.\n\n\nPara a\u00f1adir la posibilidad de cambiar de un idioma a otro en el visor, existe el plugin \nlanguage-buttons\n.\n\n\nA\u00f1adir plugins despu\u00e9s de desplegar\n\n\nUna de las funcionalidades m\u00e1s interesantes de Geoladris es el despliegue de funcionalidad en caliente: es posible incluir nuevos plugins sin tener que parar y reiniciar el servidor.\n\n\nPara esto, basta con copiar el plugin que se desea incluir dentro del directorio \nconfig_dir\n/plugins\n, \nconfigurarlo\n en caso necesario y recargar el navegador.\n\n\nLa \u00fanica limitaci\u00f3n es que los plugins han de ser plugins \ncliente\n; es decir, plugins con c\u00f3digo JavaScript exclusivamente. No es posible desplegar en caliente c\u00f3digo Java con nuevos servicios.\n\n\nRecursos est\u00e1ticos\n\n\nEn ocasiones es \u00fatil poder servir recursos est\u00e1ticos directamente desde la aplicaci\u00f3n web. Para eso existe el directorio \nconfig_dir\n/static\n. Cualquier fichero que se incluya en este directorio se servir\u00e1 autom\u00e1ticamente a trav\u00e9s de la URL \nhttp://\nhost\n/\napp\n/static/*\n. Por ejemplo, se podr\u00eda acceder a un fichero \nconfig_dir\n/static/header.png\n a trav\u00e9s de \nhttp://localhost:8080/demo/static/header.png\n.\n\n\nGeoladris reconoce algunos fichero est\u00e1ticos espec\u00edficos:\n\n\n\n\nstatic/img/favicon.png\n: Favicon de la p\u00e1gina HTML.\n\n\n\n\nconfig_dir\n/portal.properties\n\n\nFichero de propiedades. Cada plugin define sus propiedades (ver \nreferencia\n). Estas propiedades son privadas y nunca abandonan el servidor, por lo que es un buen sitio para almacenar contrase\u00f1as y otra informaci\u00f3n sensible.\n\n\nConfigurar cach\u00e9\n\n\nLa configuraci\u00f3n del portal se obtiene a partir de varios ficheros (configuraci\u00f3n global y espec\u00edfica de usuario) e incluso puede obtenerse de una base de datos o de un servicio externo para \ndesarrollos personalizados\n. En cualquier caso, obtenerla requiere un tiempo que puede hacer que el visor se ralentice cada vez.\n\n\nPara ello, Geoladris proporciona una cach\u00e9 que se puede configurar mediante dos variables:\n\n\n\n\nGEOLADRIS_CONFIG_CACHE\n: \ntrue\n/\nfalse\n. Determina si se utiliza la cach\u00e9 o no. Por defecto es \nfalse\n.\n\n\nGEOLADRIS_CACHE_TIMEOUT\n: N\u00famero m\u00e1ximo de segundos que se mantiene la cach\u00e9. Si no se especifica, la cach\u00e9 se mantiene siempre y es necesario reiniciar el servidor para releer la configuraci\u00f3n.\n\n\n\n\nDe la misma manera que el directorio de configuraci\u00f3n, estas variables pueden establecerse de varias maneras:\n\n\n\n\nVariable de entorno: \nexport GEOLADRIS_CONFIG_CACHE=true\n.\n\n\nPropiedad Java: \n-DGEOLADRIS_CONFIG_CACHE=true\n.\n\n\nPar\u00e1metro en \nweb.xml\n:\n\n\n\n\n    \ncontext-param\n\n        \nparam-name\nGEOLADRIS_CONFIG_CACHE\n/param-name\n\n        \nparam-value\ntrue\n/param-value\n\n    \n/context-param\n\n\n\n\n\n\nBase de datos\n\n\nLas aplicaciones \ndemo\n y \ndevelop\n que proporciona Geoladris traen la posibilidad de conectar autom\u00e1ticamente a la base de datos que utilizar\u00e1n algunos de los plugins (como el plugin \nfeedback\n, por ejemplo).\n\n\nPara configurar esta base de datos es necesario configurar las siguientes propiedades Java:\n\n\n\n\nGEOLADRIS_DB_URL\n: URL JDBC de la base de datos. Por ejemplo: \njdbc:postgresql://localhost:5432/geoladris\n.\n\n\nGEOLADRIS_DB_USER\n: Usuario para la autenticaci\u00f3n con la base de datos.\n\n\nGEOLADRIS_DB_PASS\n: Contrase\u00f1a para la autenticaci\u00f3n con la base de datos.\n\n\n\n\nPor ejemplo, para configurarlo en Tomcat bastar\u00eda con establecer \nJAVA_OPTS\n:\n\n\nJAVA_OPTS\n=\n-DGEOLADRIS_CONFIG_DIR\n=\n/var/geoladris -DGEOLADRIS_DB_URL\n=\njdbc:postgresql://localhost:5432/geoladris -DGEOLADRIS_DB_USER\n=\nadmin -DGEOLADRIS_DB_PASS\n=\ngeoladris", 
            "title": "Configuraci\u00f3n de aplicaciones"
        }, 
        {
            "location": "/user/config/#directorio-de-configuracion", 
            "text": "Las aplicaciones Geoladris se configuran mediante un directorio con ficheros de configuraci\u00f3n.  Este directorio deber\u00e1 contener un subdirectorio por cada aplicaci\u00f3n desplegada. Por ejemplo, si se han desplegado las aplicaciones  demo.war  y  bosques.war , y  GEOLADRIS_CONFIG_DIR  se ha establecido a  /var/geoladris , se utilizar\u00e1n los directorios  /var/geoladris/demo  y  /var/geoladris/bosques  para las aplicaciones  demo.war  y  bosques.war  respectivamente.  Si alguno de esos directorios no existe o si  GEOLADRIS_CONFIG_DIR  no se ha configurado correctamente, se utilizar\u00e1 el directorio por defecto para esa aplicaci\u00f3n concreta:  $CATALINA_BASE/webapps/ app /WEB-INF/default_config .  Para configurar este directorio en Tomcat hay diferentes formas de hacerlo:   Variable de entorno:  export GEOLADRIS_CONFIG_DIR=/var/geoladris .  Propiedad Java:  -DGEOLADRIS_CONFIG_DIR=/var/geoladris .  Par\u00e1metro en  web.xml :        context-param \n         param-name GEOLADRIS_CONFIG_DIR /param-name \n         param-value /var/geoladris /param-value \n     /context-param   A partir de ahora utilizaremos  config_dir  como el directorio de configuraci\u00f3n de una aplicaci\u00f3n.", 
            "title": "Directorio de configuraci\u00f3n"
        }, 
        {
            "location": "/user/config/#configuracion-global", 
            "text": "La configuraci\u00f3n global de la aplicaci\u00f3n se realiza con el fichero  config_dir /public-conf.json . Es un fichero de texto que contiene un objeto JSON donde cada propiedad del objeto es el nombre del plugin a configurar y el valor es la configuraci\u00f3n del plugin.  La configuraci\u00f3n del plugin es a su vez otro objeto JSON. Cada propiedad es el nombre del m\u00f3dulo RequireJS a configurar y el valor es la configuraci\u00f3n del m\u00f3dulo, tal y como se puede obtener con  module.config() .  Aparte existen las siguientes propiedades o psedo-m\u00f3dulos:   _enabled : Activa ( true ) o desactiva ( false ) el plugin. Por defecto es  true .  _override : Sobreescribe ( true ) o mezcla ( false ) la configuraci\u00f3n por defecto del plugin. Por defecto es  false .   Ejemplo:  { \n   base   :   { \n     banner   :   { \n       hide   :   true , \n       show-flag   :   false , \n       show-logos   :   false \n     } \n   }, \n   footnote :   { \n     footnote :   { \n       text :   footnote.text , \n       link :   http://example.com , \n       align :   center \n     } \n   }, \n   feedback :   { \n     _enabled   :   false \n   }  }   De esta forma es posible no solo cambiar la configuraci\u00f3n de un plugin, sino tambi\u00e9n a\u00f1adir o eliminar plugins para un usuario concreto con la propiedad  _enabled .", 
            "title": "Configuraci\u00f3n global"
        }, 
        {
            "location": "/user/config/#autenticacion-y-configuracion-especifica-de-usuario", 
            "text": "Adem\u00e1s de la configuraci\u00f3n global, se puede adaptadar la aplicaci\u00f3n en funci\u00f3n del usuario que accede a ella. Basta con a\u00f1adir un fichero  config_dir /role_conf/ role .json  por cada rol con su configuraci\u00f3n espec\u00edfica. El formato de estos ficheros es el mismo que el de  public-conf.json .  Para mayor flexibilidad, la autenticaci\u00f3n es gestionada por los plugins. Actualmente en Geoladris existe un plugin  auth  encargado de la autenticaci\u00f3n. Para utilizarlo es necesario incluirlo en el momento de  crear  la aplicaci\u00f3n.  La autenticaci\u00f3n de este plugin se apoya en la autenticaci\u00f3n del contenedor de servlets. Es decir, si se utiliza Tomcat, los usuarios de Geoladris ser\u00e1n aquellos que est\u00e1n configurados en Tomcat.  Para configurar la autenticaci\u00f3n de Tomcat, lo m\u00e1s f\u00e1cil es editar el fichero  $CATALINA_BASE/conf/tomcat-users.xml  y a\u00f1adir los usuarios y roles que necesitemos. Por ejemplo:  tomcat-users \n   role   rolename= viewer / \n   user   username= user   password= pass   roles= viewer /  /tomcat-users   Aunque hay otras opciones de configuraci\u00f3n que se pueden encontrar en la  documentaci\u00f3n oficial .  Una vez se han configurado los usuarios, lo siguiente es restringir qu\u00e9 roles pueden acceder al visor. Para ello, basta con a\u00f1adir la propiedad  auth.roles  al fichero  portal.properties  del directorio de configuraci\u00f3n:  auth.roles=viewer  Esta propiedad es una lista de roles separada por comas. Los roles deben de coincidir con los roles definidos en Tomcat.  Por \u00faltimo, para configurar el visor de manera espec\u00edfica para cada rol deberemos a\u00f1adir un fichero  role .json  a  config_dir /role_conf  por cada rol definido en  auth.roles .  Por ejemplo, para habilitar los plugins  layer-order  y  layers-editor  en el rol  viewer , habr\u00e1 que a\u00f1adir un fichero  role_conf/viewer.json  con el siguiente contenido:  { \n     layer-order   :   { \n         _enabled   :   true \n     }, \n     layers-editor   :   { \n         _enabled   :   true \n     }  }", 
            "title": "Autenticaci\u00f3n y configuraci\u00f3n espec\u00edfica de usuario"
        }, 
        {
            "location": "/user/config/#traducciones", 
            "text": "Con Geoladris se pueden configurar las cadenas de texto que aparecen en el visor e incluso escribirlas en diferentes idiomas.  Para ello, basta con crear un directorio  config_dir /messages  que contenga ficheros  messages_ lang .properties .  lang  es el c\u00f3digo del idioma seg\u00fan la nomenclatura  ISO 639-1  de dos letras.  Por ejemplo, para tener traducciones en ingl\u00e9s y espa\u00f1ol habr\u00eda que crear los ficheros  messages_en.properties  y  messages_es.properties . Adem\u00e1s, existe un fichero  messages.properties  (sin el sufijo del idioma) con las traducciones por defecto, que puede ser una copia de los anteriores.  Un ejemplo de fichero de traducciones:  ...\nbase_layers=Capas Base\ncancel=Cancelar\nchart=Gr\\u00e1fico\ndata_source=Fuente de datos\n...  Geoladris reconoce las siguientes traducciones:   title : T\u00edtulo de la p\u00e1gina HTML.   Aparte, cada plugin define sus propias traducciones. Para ver qu\u00e9 traducciones hay disponibles, ver  referencia .  Para a\u00f1adir la posibilidad de cambiar de un idioma a otro en el visor, existe el plugin  language-buttons .", 
            "title": "Traducciones"
        }, 
        {
            "location": "/user/config/#anadir-plugins-despues-de-desplegar", 
            "text": "Una de las funcionalidades m\u00e1s interesantes de Geoladris es el despliegue de funcionalidad en caliente: es posible incluir nuevos plugins sin tener que parar y reiniciar el servidor.  Para esto, basta con copiar el plugin que se desea incluir dentro del directorio  config_dir /plugins ,  configurarlo  en caso necesario y recargar el navegador.  La \u00fanica limitaci\u00f3n es que los plugins han de ser plugins  cliente ; es decir, plugins con c\u00f3digo JavaScript exclusivamente. No es posible desplegar en caliente c\u00f3digo Java con nuevos servicios.", 
            "title": "A\u00f1adir plugins despu\u00e9s de desplegar"
        }, 
        {
            "location": "/user/config/#recursos-estaticos", 
            "text": "En ocasiones es \u00fatil poder servir recursos est\u00e1ticos directamente desde la aplicaci\u00f3n web. Para eso existe el directorio  config_dir /static . Cualquier fichero que se incluya en este directorio se servir\u00e1 autom\u00e1ticamente a trav\u00e9s de la URL  http:// host / app /static/* . Por ejemplo, se podr\u00eda acceder a un fichero  config_dir /static/header.png  a trav\u00e9s de  http://localhost:8080/demo/static/header.png .  Geoladris reconoce algunos fichero est\u00e1ticos espec\u00edficos:   static/img/favicon.png : Favicon de la p\u00e1gina HTML.", 
            "title": "Recursos est\u00e1ticos"
        }, 
        {
            "location": "/user/config/#config_dirportalproperties", 
            "text": "Fichero de propiedades. Cada plugin define sus propiedades (ver  referencia ). Estas propiedades son privadas y nunca abandonan el servidor, por lo que es un buen sitio para almacenar contrase\u00f1as y otra informaci\u00f3n sensible.", 
            "title": "&lt;config_dir&gt;/portal.properties"
        }, 
        {
            "location": "/user/config/#configurar-cache", 
            "text": "La configuraci\u00f3n del portal se obtiene a partir de varios ficheros (configuraci\u00f3n global y espec\u00edfica de usuario) e incluso puede obtenerse de una base de datos o de un servicio externo para  desarrollos personalizados . En cualquier caso, obtenerla requiere un tiempo que puede hacer que el visor se ralentice cada vez.  Para ello, Geoladris proporciona una cach\u00e9 que se puede configurar mediante dos variables:   GEOLADRIS_CONFIG_CACHE :  true / false . Determina si se utiliza la cach\u00e9 o no. Por defecto es  false .  GEOLADRIS_CACHE_TIMEOUT : N\u00famero m\u00e1ximo de segundos que se mantiene la cach\u00e9. Si no se especifica, la cach\u00e9 se mantiene siempre y es necesario reiniciar el servidor para releer la configuraci\u00f3n.   De la misma manera que el directorio de configuraci\u00f3n, estas variables pueden establecerse de varias maneras:   Variable de entorno:  export GEOLADRIS_CONFIG_CACHE=true .  Propiedad Java:  -DGEOLADRIS_CONFIG_CACHE=true .  Par\u00e1metro en  web.xml :        context-param \n         param-name GEOLADRIS_CONFIG_CACHE /param-name \n         param-value true /param-value \n     /context-param", 
            "title": "Configurar cach\u00e9"
        }, 
        {
            "location": "/user/config/#base-de-datos", 
            "text": "Las aplicaciones  demo  y  develop  que proporciona Geoladris traen la posibilidad de conectar autom\u00e1ticamente a la base de datos que utilizar\u00e1n algunos de los plugins (como el plugin  feedback , por ejemplo).  Para configurar esta base de datos es necesario configurar las siguientes propiedades Java:   GEOLADRIS_DB_URL : URL JDBC de la base de datos. Por ejemplo:  jdbc:postgresql://localhost:5432/geoladris .  GEOLADRIS_DB_USER : Usuario para la autenticaci\u00f3n con la base de datos.  GEOLADRIS_DB_PASS : Contrase\u00f1a para la autenticaci\u00f3n con la base de datos.   Por ejemplo, para configurarlo en Tomcat bastar\u00eda con establecer  JAVA_OPTS :  JAVA_OPTS = -DGEOLADRIS_CONFIG_DIR = /var/geoladris -DGEOLADRIS_DB_URL = jdbc:postgresql://localhost:5432/geoladris -DGEOLADRIS_DB_USER = admin -DGEOLADRIS_DB_PASS = geoladris", 
            "title": "Base de datos"
        }, 
        {
            "location": "/user/create/", 
            "text": "Para crear una aplicaci\u00f3n propia, Geoladris proporciona un \nscript\n bash (Linux). Este script utiliza un fichero \nbuild.json\n que describe la aplicaci\u00f3n y (opcionalmente) un \ndirectorio de configuraci\u00f3n\n (llamado \nconfig\n junto a \nbuild.json\n) y produce un paquete \n.war\n listo para desplegar.\n\n\nPor ejemplo, se puede crear una aplicaci\u00f3n que contenga \u00fanicamente los plugins \nbase\n y \nlayers-editor\n utilizando este fichero \nbuild.json\n:\n\n\n{\n\n  \nname\n:\n \ndemo\n,\n\n  \nplugins\n:\n \n[\nbase\n,\n \nlayers-editor\n]\n\n\n}\n\n\n\n\n\n\nSi se ejecuta el script sin argumentos:\n\n\n$ geoladris_build.sh\n\n\n\n\n\nobtendremos un fichero \ndemo.war\n listo para desplegar. La versi\u00f3n de los plugins ser\u00e1 la \u00faltima versi\u00f3n estable. Para especificar una versi\u00f3n concreta para todos los plugins de Geoladris se puede utilizar \n-v\n:\n\n\n$ geoladris_build.sh -v \n6\n.0.1\n\n\n\n\n\nTambi\u00e9n se puede utilizar el script para generar una aplicaci\u00f3n con plugins que no son de Geoladris. Basta con a\u00f1adir \ngrupo\n:\nplugin\n:\nversion\n. Por ejemplo:\n\n\n{\n\n  \nname\n:\n \ndemo\n,\n\n  \nversion\n:\n \n1.0.0\n,\n\n  \nplugins\n:\n \n[\nbase\n,\n \nlayers-editor\n,\n \nmigrupo:miplugin:1.0.0\n,\n \nde.csgis.geoladris:myplugin:1.0.1\n]\n\n\n}\n\n\n\n\n\n\nPor \u00faltimo, es posible obtener una ayuda con todas las opciones del script y la referencia del fichero \nbuild.json\n con \n-h\n:\n\n\n$ geoladris_build.sh -h", 
            "title": "Creaci\u00f3n de aplicaciones"
        }, 
        {
            "location": "/user/download/", 
            "text": "Geoladris proporciona alguna aplicaciones de ejemplo para poder descargar directamente y probar. Estas aplicaciones son:\n\n\n\n\ndemo\n: Aplicaci\u00f3n con la mayor parte de la funcionalidad de Geoladris. \u00datil como plantilla para configurar una aplicaci\u00f3n propia.\n\n\nessential\n: Aplicaci\u00f3n con la m\u00ednima funcionalidad de Geoladris. \u00datil como base para desarrollo.\n\n\n\n\nEstable\n\n\n\n\nDemo 7.0.0\n\n\nEssential 7.0.0\n\n\n\n\nDesarrollo\n\n\n\n\nDemo Latest\n\n\nEssential Latest\n\n\n\n\nDocker\n\n\n\n\nDemo\n.", 
            "title": "Descargas"
        }, 
        {
            "location": "/user/download/#estable", 
            "text": "Demo 7.0.0  Essential 7.0.0", 
            "title": "Estable"
        }, 
        {
            "location": "/user/download/#desarrollo", 
            "text": "Demo Latest  Essential Latest", 
            "title": "Desarrollo"
        }, 
        {
            "location": "/user/download/#docker", 
            "text": "Demo .", 
            "title": "Docker"
        }, 
        {
            "location": "/dev/quickstart/", 
            "text": "En primer lugar hay que clonar los repositorios de Geoladris (ver \nrepositorios\n):\n\n\ngit clone git@github.com:geoladris/core.git\ngit clone git@github.com:geoladris/plugins.git\ngit clone git@github.com:geoladris/apps.git\n\n\n\n\n\nPosteriormente hay que instalar \ncore\n y \nplugins\n (en ese orden) localmente con Maven (puede tardar un poco):\n\n\ncd core\nmvn install\ncd ../plugins\nmvn install\n\n\n\n\n\nPor \u00faltimo, nos falta por empaquetar las aplicaciones utilizando \ncore\n y \nplugins\n:\n\n\ncd ../apps\nmvn package\n\n\n\n\n\nUna vez hecho esto tendremos los paquetes \n.war\n listos para ser desplegados en Tomcat:\n\n\ncp apps/demo/target/demo.war $CATALINA_BASE/webapps", 
            "title": "Gu\u00eda r\u00e1pida"
        }, 
        {
            "location": "/dev/source_code/", 
            "text": "Tecnolog\u00edas\n\n\nEn Geoladris utilizamos \nMaven\n para construir nuestros proyectos, tanto el \ncore\n como los plugins. Incluso los plugins que \u00fanicamente tienen parte cliente (plugins \ncliente\n con CSS y JavaScript) se gestionan a trav\u00e9s de Maven para poder tratarlos conjuntamente; para ello utilizamos el plugin \nfrontend-maven-plugin\n.\n\n\nTanto el core como los plugins con parte servidora utilizan la \nAPI Servlet 3.1\n. Utilizan ficheros \nweb-fragment.xml\n para definir sus servlets, filters y application listeners.\n\n\nEn cuanto a los plugins cliente, todos tienen un fichero \npackage.json\n con sus dependencias. Las dependencias JavaScript las manejamos con \nyarn\n. Como se explica arriba, \nMaven\n se encarga de hacer las llamadas correspondientes a \nyarn\n mediante el \nfrontend-maven-plugin\n.\n\n\nPor \u00faltimo, el c\u00f3digo JavaScript se organiza en m\u00f3dulos de \nRequireJS\n.\n\n\nPatr\u00f3n de dise\u00f1o \nmessage-bus\n\n\nEn Geoladris hacemos un uso extensivo del patr\u00f3n de dise\u00f1o \nmessage-bus\n.\n\n\nEl patr\u00f3n de dise\u00f1o \nmessage-bus\n permite desacoplar los componentes que forman una aplicaci\u00f3n. En una aplicaci\u00f3n modular, los distintos componentes necesitan interactuar entre s\u00ed. Si el acoplamiento es directo, la aplicaci\u00f3n deja de ser modular ya que aparecen dependencias, con frecuencia rec\u00edprocas, entre los distintos m\u00f3dulos y no es posible realizar cambios a un m\u00f3dulo sin que otros se vean afectados.\n\n\nEn cambio, si los objetos se acoplan a trav\u00e9s de un objeto intermediario (\nmessage-bus\n), casi todas las dependencias desaparecen, dejando s\u00f3lo aquellas que hay entre el \nmessage-bus\n y los distintos m\u00f3dulos.\n\n\nPara visualizar el patr\u00f3n, propondremos un ejemplo, una aplicaci\u00f3n modular que consta de tres componentes con representaci\u00f3n gr\u00e1fica y que est\u00e1n dispuestos de la siguiente manera:\n\n\n\n\nMap: En la parte central habr\u00e1 un mapa.\n\n\nLayerList: En la parte izquierda habr\u00e1 una lista de capas.\n\n\nNewLayer: En la parte superior existir\u00e1 un control que permite a\u00f1adir capas a los otros dos componentes.\n\n\n\n\nUn posible dise\u00f1o de dicha p\u00e1gina consistir\u00eda en un m\u00f3dulo \nlayout\n que maqueta la p\u00e1gina HTML y que inicializa los otros tres objetos. En respuesta a la acci\u00f3n del usuario, el objeto \nNewLayer\n mandar\u00eda un mensaje a \nLayerList\n y \nMap\n para a\u00f1adir el tema en ambos componentes. De la misma manera, \nLayerList\n podr\u00eda mandar un mensaje a \nMap\n en caso de que se permitiera la eliminaci\u00f3n de capas desde aqu\u00e9l. El siguiente grafo muestra los mensajes que se pasar\u00edan los distintos objetos:\n\n\n\n\nEs posible observar como en el caso de que se quisiera quitar el m\u00f3dulo \nLayerList\n, ser\u00eda necesario modificar el objeto Layout as\u00ed como el objeto \nNewLayer\n, ya que est\u00e1n directamente acoplados. Sin embargo, con el uso del \nmessage-bus\n, ser\u00eda posible hacer que los distintos objetos no se referenciaran entre s\u00ed directamente sino a trav\u00e9s del \nmessage-bus\n:\n\n\n\n\nAs\u00ed, el m\u00f3dulo \nNewLayer\n mandar\u00eda un mensaje al \nmessage-bus\n con los datos de la nueva capa y \nMap\n y \nLayerList\n s\u00edmplemente escuchar\u00edan el mensaje y reaccionar\u00edan convenientemente. Ser\u00eda trivial quitar de la p\u00e1gina \nLayerList\n ya que no hay ninguna referencia directa al mismo (salvo tal vez en \nLayout\n).\n\n\nY al contrario: ser\u00eda posible incluir un nuevo m\u00f3dulo, por ejemplo un mapa adicional, y que ambos escuchasen el evento \nadd-layer\n de forma que se a\u00f1adir\u00edan los temas a ambos mapas.\n\n\nDe esta manera la aplicaci\u00f3n es totalmente modular: es posible reemplazar m\u00f3dulos sin que los otros m\u00f3dulos se vean afectados, se pueden realizar contribuciones bien definidas que s\u00f3lo deben entender los mensajes existentes para poder integrarse en la aplicaci\u00f3n, etc.\n\n\nGit\n\n\nRepositorios\n\n\nA continuaci\u00f3n se detalla la estructura del proyecto.\n\n\nSi uno revisa el repositorio de c\u00f3digo de \nGeoladris\n encontrar\u00e1 4 repositorios:\n\n\n\n\ndoc\n, el repositorio donde se encuentra la documentaci\u00f3n oficial del proyecto\n\n\ncore\n. Proyecto Maven. Se encarga de empaquetar todos los plugins (en tiempo de compilaci\u00f3n) y luego servir sus recursos (en tiempo de ejecuci\u00f3n).\n\n\nplugins\n: Conjunto de plugins con funcionalidad aislada que pueden ser o no incluidos en las aplicaciones de manera independiente (ver \nplugins\n).\n\n\napps\n: Aplicaciones que definen qu\u00e9 plugins utilizan y c\u00f3mo se configuran.\n\n\n\n\nModelo de ramas\n\n\nEn Geoladris gastamos un modelo de ramas muy parecido al de \nGeoServer\n y al modelo \ncactus\n.\n\n\nExisten las siguientes ramas:\n\n\n\n\nmaster\n: Rama principal sobre la que se realizan los \u00faltimos desarrollos.\n\n\n\n\nRamas de \nrelease\n: Ramas de desarrollo de una versi\u00f3n determinada. Tienen como nombre \nmajor\n.\nminor\n.x\n (\nversionado sem\u00e1ntico\n). Por ejemplo: \n6.0.x\n.\n\n\nEstas ramas nacen siempre de \nmaster\n y nunca se vuelven a mezclar en \nmaster\n. Si se quieren incluir los cambios en diferentes ramas, se utiliza \ngit cherry-pick\n (igual que \nGeoServer\n).\n\n\n\n\n\n\nRamas de \nfeature\n: Ramas para desarrollos espec\u00edficos. Pueden salir tanto de \nmaster\n como de una rama de \nrelease\n y siempre se mezclan sobre la rama de la que salieron.\n\n\nSe recomienda no mantener estas ramas durante mucho tiempo para evitar dificultades al mezclar.\n\n\n\n\n\n\nAplicando cambios\n\n\nSiguiente el \nversionado sem\u00e1ntico\n podemos encontrarnos con tres tipos de cambios:\n\n\nParches\n (aumentan el patch number): Se pueden aplicar en cualquier rama.\n\n\nCambios menores\n (aumentan el minor number): Se pueden aplicar \u00fanicamente en \nmaster\n o en las ramas de release (p. ej. \n7.1.x\n) siempre y cuando todav\u00eda no se haya publicado la primera versi\u00f3n de esa rama de release (p. ej. \n7.1.0\n).\n\n\nCambios mayores\n (aumentan el major number): \u00danicamente aplicables en \nmaster\n. Adem\u00e1s, en este caso es necesario dejar lista la rama de release de la versi\u00f3n menor que hasta ese momento estaba en \nmaster\n.\n\n\nPor ejemplo, si en \nmaster\n estaba la versi\u00f3n \n7.2.0-SNAPSHOT\n y aplicamos un cambio que actualiza la versi\u00f3n a \n8.0.0-SNAPSHOT\n, deberemos crear la rama de release antes de aplicar ese cambio:\n\n\ngit checkout master\ngit checkout -b \n7\n.2.x\ngit push -u origin \n7\n.2.x\n\n\n\n\n\nIMPORTANTE\n: Para aplicar cambios en varias ramas, nunca mezclamos entre ellas; utilizamos \ngit cherry-pick\n (igual que \nGeoServer\n).\n\n\nIMPORTANTE\n: Cada vez que introducimos un cambio (en cualquiera de las ramas), actualizamos el changelog.\n\n\nIMPORTANTE\n: Los n\u00fameros de versi\u00f3n en los ficheros \npom.xml\n y \npackage.json\n \u00fanicamente se cambian durante el proceso de \npublicaci\u00f3n\n o en el caso de introducir cambios mayores.\n\n\nIntegraci\u00f3n continua\n\n\nGeoladris est\u00e1 configurado en \nTravis\n para su integraci\u00f3n continua.\n\n\nLa configuraci\u00f3n debe garantizar que se pasan todos los tests y que se hace un \nmvn deploy\n de todos los artefactos que componen Geoladris.\n\n\nEl deploy de Maven requiere autenticaci\u00f3n. Para proporcionarla hay un fichero \ndeploy-settings.xml\n en la ra\u00edz del repositorio que utiliza variables de entorno para las credenciales:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nsettings\n\n        \nxmlns=\nhttp://maven.apache.org/SETTINGS/1.0.0\n\n        \nxmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n        \nxsi:schemaLocation=\nhttp://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\n\n    \nservers\n\n        \nserver\n\n            \nid\ngeoladris-releases\n/id\n\n            \nusername\n${env.GEOLADRIS_DEPLOY_USER}\n/username\n\n            \npassword\n${env.GEOLADRIS_DEPLOY_PASS}\n/password\n\n        \n/server\n\n        \nserver\n\n            \nid\ngeoladris-snapshots\n/id\n\n            \nusername\n${env.GEOLADRIS_DEPLOY_USER}\n/username\n\n            \npassword\n${env.GEOLADRIS_DEPLOY_PASS}\n/password\n\n        \n/server\n\n    \n/servers\n\n\n/settings\n\n\n\n\n\n\nBasta con configurar Maven en el fichero \n.travis.yml\n para que utilice este fichero:\n\n\nafter_success:\n  - mvn deploy -s deploy-settings.xml\n\n\n\n\n\nPor \u00faltimo, hay que configurar las variables de entorno en la interfaz web de Travis.\n\n\nTests de integraci\u00f3n\n\n\nPara ejecutar los tests de integraci\u00f3n es necesario utilizar de manera expl\u00edcita el profile de Maven \nintegration-tests\n:\n\n\nmvn verify -Pintegration-tests\n\n\n\n\n\nAdem\u00e1s, para que los tests de integraci\u00f3n puedan pasar correctamente es necesario:\n\n\n\n\nEstablecer la variable de entorno \nGEOLADRIS_EMAIL_PASSWORD\n. La contrase\u00f1a es privada y s\u00f3lo la conocen los principales desarrolladores de Geoladris.\n\n\nConfigurar una base de datos PostGIS en local con puerto 5432 y credenciales \ndocker:docker\n. Para ello se puede utilizar el siguiente comando:\n\n\n\n\ndocker run -d -p 5432:5432 --name=postgis kartoza/postgis\n\n\n\n\n\nDepurando JavaScript en el navegador\n\n\nPor defecto, se utilizan recursos minificados en el cliente. Los recursos minificados forman parte del \nempaquetado\n.\n\n\nTambi\u00e9n es posible utilizar recursos \nno\n minificados a\u00f1adiendo el par\u00e1metro \ndebug=true\n a la petici\u00f3n HTML. Por ejemplo: \nhttp://localhost:8080/demo/?debug=true\n.\n\n\nCuando se depura JavaScript es importante conocer la secuencia de inicio de la aplicaci\u00f3n:\n\n\n\n\nSe carga \nrequire.js\n.\n\n\nrequire.js\n carga el m\u00f3dulo \nmain\n.\n\n\nmain\n carga el m\u00f3dulo \ncustomization\n.\n\n\ncustomization\n carga din\u00e1micamente los m\u00f3dulos especificados en su configuraci\u00f3n (\nconfig.js\n).\n\n\nCuando todos los m\u00f3dulos se han cargado se lanza el evento \nmodules-loaded\n.\n\n\nCuando todas las capas se han a\u00f1adido al mapa se lanza el evento \nlayers-loaded\n.", 
            "title": "C\u00f3digo fuente"
        }, 
        {
            "location": "/dev/source_code/#tecnologias", 
            "text": "En Geoladris utilizamos  Maven  para construir nuestros proyectos, tanto el  core  como los plugins. Incluso los plugins que \u00fanicamente tienen parte cliente (plugins  cliente  con CSS y JavaScript) se gestionan a trav\u00e9s de Maven para poder tratarlos conjuntamente; para ello utilizamos el plugin  frontend-maven-plugin .  Tanto el core como los plugins con parte servidora utilizan la  API Servlet 3.1 . Utilizan ficheros  web-fragment.xml  para definir sus servlets, filters y application listeners.  En cuanto a los plugins cliente, todos tienen un fichero  package.json  con sus dependencias. Las dependencias JavaScript las manejamos con  yarn . Como se explica arriba,  Maven  se encarga de hacer las llamadas correspondientes a  yarn  mediante el  frontend-maven-plugin .  Por \u00faltimo, el c\u00f3digo JavaScript se organiza en m\u00f3dulos de  RequireJS .", 
            "title": "Tecnolog\u00edas"
        }, 
        {
            "location": "/dev/source_code/#patron-de-diseno-message-bus", 
            "text": "En Geoladris hacemos un uso extensivo del patr\u00f3n de dise\u00f1o  message-bus .  El patr\u00f3n de dise\u00f1o  message-bus  permite desacoplar los componentes que forman una aplicaci\u00f3n. En una aplicaci\u00f3n modular, los distintos componentes necesitan interactuar entre s\u00ed. Si el acoplamiento es directo, la aplicaci\u00f3n deja de ser modular ya que aparecen dependencias, con frecuencia rec\u00edprocas, entre los distintos m\u00f3dulos y no es posible realizar cambios a un m\u00f3dulo sin que otros se vean afectados.  En cambio, si los objetos se acoplan a trav\u00e9s de un objeto intermediario ( message-bus ), casi todas las dependencias desaparecen, dejando s\u00f3lo aquellas que hay entre el  message-bus  y los distintos m\u00f3dulos.  Para visualizar el patr\u00f3n, propondremos un ejemplo, una aplicaci\u00f3n modular que consta de tres componentes con representaci\u00f3n gr\u00e1fica y que est\u00e1n dispuestos de la siguiente manera:   Map: En la parte central habr\u00e1 un mapa.  LayerList: En la parte izquierda habr\u00e1 una lista de capas.  NewLayer: En la parte superior existir\u00e1 un control que permite a\u00f1adir capas a los otros dos componentes.   Un posible dise\u00f1o de dicha p\u00e1gina consistir\u00eda en un m\u00f3dulo  layout  que maqueta la p\u00e1gina HTML y que inicializa los otros tres objetos. En respuesta a la acci\u00f3n del usuario, el objeto  NewLayer  mandar\u00eda un mensaje a  LayerList  y  Map  para a\u00f1adir el tema en ambos componentes. De la misma manera,  LayerList  podr\u00eda mandar un mensaje a  Map  en caso de que se permitiera la eliminaci\u00f3n de capas desde aqu\u00e9l. El siguiente grafo muestra los mensajes que se pasar\u00edan los distintos objetos:   Es posible observar como en el caso de que se quisiera quitar el m\u00f3dulo  LayerList , ser\u00eda necesario modificar el objeto Layout as\u00ed como el objeto  NewLayer , ya que est\u00e1n directamente acoplados. Sin embargo, con el uso del  message-bus , ser\u00eda posible hacer que los distintos objetos no se referenciaran entre s\u00ed directamente sino a trav\u00e9s del  message-bus :   As\u00ed, el m\u00f3dulo  NewLayer  mandar\u00eda un mensaje al  message-bus  con los datos de la nueva capa y  Map  y  LayerList  s\u00edmplemente escuchar\u00edan el mensaje y reaccionar\u00edan convenientemente. Ser\u00eda trivial quitar de la p\u00e1gina  LayerList  ya que no hay ninguna referencia directa al mismo (salvo tal vez en  Layout ).  Y al contrario: ser\u00eda posible incluir un nuevo m\u00f3dulo, por ejemplo un mapa adicional, y que ambos escuchasen el evento  add-layer  de forma que se a\u00f1adir\u00edan los temas a ambos mapas.  De esta manera la aplicaci\u00f3n es totalmente modular: es posible reemplazar m\u00f3dulos sin que los otros m\u00f3dulos se vean afectados, se pueden realizar contribuciones bien definidas que s\u00f3lo deben entender los mensajes existentes para poder integrarse en la aplicaci\u00f3n, etc.", 
            "title": "Patr\u00f3n de dise\u00f1o message-bus"
        }, 
        {
            "location": "/dev/source_code/#git", 
            "text": "", 
            "title": "Git"
        }, 
        {
            "location": "/dev/source_code/#repositorios", 
            "text": "A continuaci\u00f3n se detalla la estructura del proyecto.  Si uno revisa el repositorio de c\u00f3digo de  Geoladris  encontrar\u00e1 4 repositorios:   doc , el repositorio donde se encuentra la documentaci\u00f3n oficial del proyecto  core . Proyecto Maven. Se encarga de empaquetar todos los plugins (en tiempo de compilaci\u00f3n) y luego servir sus recursos (en tiempo de ejecuci\u00f3n).  plugins : Conjunto de plugins con funcionalidad aislada que pueden ser o no incluidos en las aplicaciones de manera independiente (ver  plugins ).  apps : Aplicaciones que definen qu\u00e9 plugins utilizan y c\u00f3mo se configuran.", 
            "title": "Repositorios"
        }, 
        {
            "location": "/dev/source_code/#modelo-de-ramas", 
            "text": "En Geoladris gastamos un modelo de ramas muy parecido al de  GeoServer  y al modelo  cactus .  Existen las siguientes ramas:   master : Rama principal sobre la que se realizan los \u00faltimos desarrollos.   Ramas de  release : Ramas de desarrollo de una versi\u00f3n determinada. Tienen como nombre  major . minor .x  ( versionado sem\u00e1ntico ). Por ejemplo:  6.0.x .  Estas ramas nacen siempre de  master  y nunca se vuelven a mezclar en  master . Si se quieren incluir los cambios en diferentes ramas, se utiliza  git cherry-pick  (igual que  GeoServer ).    Ramas de  feature : Ramas para desarrollos espec\u00edficos. Pueden salir tanto de  master  como de una rama de  release  y siempre se mezclan sobre la rama de la que salieron.  Se recomienda no mantener estas ramas durante mucho tiempo para evitar dificultades al mezclar.", 
            "title": "Modelo de ramas"
        }, 
        {
            "location": "/dev/source_code/#aplicando-cambios", 
            "text": "Siguiente el  versionado sem\u00e1ntico  podemos encontrarnos con tres tipos de cambios:  Parches  (aumentan el patch number): Se pueden aplicar en cualquier rama.  Cambios menores  (aumentan el minor number): Se pueden aplicar \u00fanicamente en  master  o en las ramas de release (p. ej.  7.1.x ) siempre y cuando todav\u00eda no se haya publicado la primera versi\u00f3n de esa rama de release (p. ej.  7.1.0 ).  Cambios mayores  (aumentan el major number): \u00danicamente aplicables en  master . Adem\u00e1s, en este caso es necesario dejar lista la rama de release de la versi\u00f3n menor que hasta ese momento estaba en  master .  Por ejemplo, si en  master  estaba la versi\u00f3n  7.2.0-SNAPSHOT  y aplicamos un cambio que actualiza la versi\u00f3n a  8.0.0-SNAPSHOT , deberemos crear la rama de release antes de aplicar ese cambio:  git checkout master\ngit checkout -b  7 .2.x\ngit push -u origin  7 .2.x  IMPORTANTE : Para aplicar cambios en varias ramas, nunca mezclamos entre ellas; utilizamos  git cherry-pick  (igual que  GeoServer ).  IMPORTANTE : Cada vez que introducimos un cambio (en cualquiera de las ramas), actualizamos el changelog.  IMPORTANTE : Los n\u00fameros de versi\u00f3n en los ficheros  pom.xml  y  package.json  \u00fanicamente se cambian durante el proceso de  publicaci\u00f3n  o en el caso de introducir cambios mayores.", 
            "title": "Aplicando cambios"
        }, 
        {
            "location": "/dev/source_code/#integracion-continua", 
            "text": "Geoladris est\u00e1 configurado en  Travis  para su integraci\u00f3n continua.  La configuraci\u00f3n debe garantizar que se pasan todos los tests y que se hace un  mvn deploy  de todos los artefactos que componen Geoladris.  El deploy de Maven requiere autenticaci\u00f3n. Para proporcionarla hay un fichero  deploy-settings.xml  en la ra\u00edz del repositorio que utiliza variables de entorno para las credenciales:  ?xml version= 1.0  encoding= UTF-8 ?  settings \n         xmlns= http://maven.apache.org/SETTINGS/1.0.0 \n         xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n         xsi:schemaLocation= http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd \n     servers \n         server \n             id geoladris-releases /id \n             username ${env.GEOLADRIS_DEPLOY_USER} /username \n             password ${env.GEOLADRIS_DEPLOY_PASS} /password \n         /server \n         server \n             id geoladris-snapshots /id \n             username ${env.GEOLADRIS_DEPLOY_USER} /username \n             password ${env.GEOLADRIS_DEPLOY_PASS} /password \n         /server \n     /servers  /settings   Basta con configurar Maven en el fichero  .travis.yml  para que utilice este fichero:  after_success:\n  - mvn deploy -s deploy-settings.xml  Por \u00faltimo, hay que configurar las variables de entorno en la interfaz web de Travis.", 
            "title": "Integraci\u00f3n continua"
        }, 
        {
            "location": "/dev/source_code/#tests-de-integracion", 
            "text": "Para ejecutar los tests de integraci\u00f3n es necesario utilizar de manera expl\u00edcita el profile de Maven  integration-tests :  mvn verify -Pintegration-tests  Adem\u00e1s, para que los tests de integraci\u00f3n puedan pasar correctamente es necesario:   Establecer la variable de entorno  GEOLADRIS_EMAIL_PASSWORD . La contrase\u00f1a es privada y s\u00f3lo la conocen los principales desarrolladores de Geoladris.  Configurar una base de datos PostGIS en local con puerto 5432 y credenciales  docker:docker . Para ello se puede utilizar el siguiente comando:   docker run -d -p 5432:5432 --name=postgis kartoza/postgis", 
            "title": "Tests de integraci\u00f3n"
        }, 
        {
            "location": "/dev/source_code/#depurando-javascript-en-el-navegador", 
            "text": "Por defecto, se utilizan recursos minificados en el cliente. Los recursos minificados forman parte del  empaquetado .  Tambi\u00e9n es posible utilizar recursos  no  minificados a\u00f1adiendo el par\u00e1metro  debug=true  a la petici\u00f3n HTML. Por ejemplo:  http://localhost:8080/demo/?debug=true .  Cuando se depura JavaScript es importante conocer la secuencia de inicio de la aplicaci\u00f3n:   Se carga  require.js .  require.js  carga el m\u00f3dulo  main .  main  carga el m\u00f3dulo  customization .  customization  carga din\u00e1micamente los m\u00f3dulos especificados en su configuraci\u00f3n ( config.js ).  Cuando todos los m\u00f3dulos se han cargado se lanza el evento  modules-loaded .  Cuando todas las capas se han a\u00f1adido al mapa se lanza el evento  layers-loaded .", 
            "title": "Depurando JavaScript en el navegador"
        }, 
        {
            "location": "/dev/environment/", 
            "text": "Cliente\n\n\nEn primer lugar tendremos que bajarnos un servidor Tomcat sobre el que correremos la aplicaci\u00f3n. Para esta documentaci\u00f3n hemos utilizado la versi\u00f3n \n8.5.27\n:\n\n\nwget http://apache.rediris.es/tomcat/tomcat-8/v8.5.27/bin/apache-tomcat-8.5.27.tar.gz\ntar xzf apache-tomcat-8.5.27.tar.gz\n\n\n\n\n\nConfiguraremos el directorio de Geoladris para Tomcat (ver \nm\u00e1s\n):\n\n\necho\n \nJAVA_OPTS=-DGEOLADRIS_CONFIG_DIR=\n$PWD\n/geoladris_config_dir\n \n apache-tomcat-8.5.27/bin/setenv.sh\n\n\n\n\n\nDespu\u00e9s deberemos descargarnos la \naplicaci\u00f3n\n de desarrollo sobre la que trabajaremos:\n\n\nwget https://oss.sonatype.org/content/repositories/snapshots/com/github/geoladris/apps/develop/7.0.0-SNAPSHOT/develop-7.0.0-20180212.113905-2.war\nmv develop-*.war apache-tomcat-8.5.27/webapps/develop.war\n\n\n\n\n\nLo siguiente que tenemos que hacer es preparar un directorio de configuraci\u00f3n. En caso de no disponer de ninguno podemos utilizar este \nejemplo\n.\n\n\nUna vez tenemos preparado/descomprimido el directorio de configuraci\u00f3n, clonaremos el repositorio de plugins dentro, de forma que el portal utilice los ficheros cliente del repositorio:\n\n\ngit clone git@github.com:geoladris/plugins.git geoladris_config_dir/develop/plugins\n\n\n\n\n\nPor \u00faltimo, construiremos los plugins con \nyarn\n antes de ejecutar:\n\n\ncd\n geoladris_config_dir/develop/plugins\n\nfor\n i in \n`\nls */package.json\n`\n;\n \ndo\n\n  \npushd\n \n`\ndirname \n$i\n`\n\n  yarn\n  \npopd\n\n\ndone\n\n\ncd\n ../../..\n\n\n\n\n\nY arrancaremos Tomcat:\n\n\napache-tomcat-8.5.27/bin/catalina.sh start\n\n\n\n\n\nA partir de ahora podemos modificar los ficheros cliente dentro del directorio de configuraci\u00f3n (\ngeoladris_config_dir/develop/plugins\n) y al recargar el portal se aplicar\u00e1n los cambios.\n\n\nServidor\n\n\nPara trabajar con el c\u00f3digo del servidor antes tenemos que haber configurado el c\u00f3digo del \ncliente\n. Adem\u00e1s, en caso de que hayamos arrancado Tomcat, antes que nada deberemos pararlo:\n\n\napache-tomcat-8.5.27/bin/catalina.sh stop\n\n\n\n\n\nEn primer lugar clonamos el repositorio con la aplicaci\u00f3n de desarrollo (\ndevelop\n):\n\n\ngit clone git@github.com:geoladris/apps.git\n\n\n\n\n\nLuego nos descargamos \nEclipse IDE for Java EE Developers\n. Para esta gu\u00eda se ha utilizado la versi\u00f3n Oxygen.2 (4.7.2).\n\n\nArrancamos Eclipse y configuramos el workspace. Una vez est\u00e1 abierto debemos importar los proyectos que vamos a utilizar. Para esto  basta con importarlos como proyectos Maven (\nProject Explorer\n, \nImport \n Import... \n Maven \n Existing Maven Projects\n). Necesitaremos al menos la aplicaci\u00f3n \ndevelop\n y el plugin \nbase\n. Adem\u00e1s, podemos importar cualquier otro plugin con el que queramos trabajar.\n\n\n\n\nPara el caso particular de los plugins, estos contienen directorios \nnode\n y \nnode_modules\n con una gran cantidad de recursos que ralentizan Eclipse. Para ignorar esos directorios podemos ejecutar el siguiente script bash:\n\n\n\n\nfor\n i in \n`\nfind geoladris_config_dir/develop/plugins -name .project\n`\n;\n \ndo\n\n  sed -i \ns#\n/projectDescription\n#\nfilteredResources\nfilter\nid\n`date +%s0000`\n/id\nname\n/name\ntype\n10\n/type\nmatcher\nid\norg.eclipse.ui.ide.multiFilter\n/id\narguments\n1.0-name-matches-false-false-node*\n/arguments\n/matcher\n/filter\n/filteredResources\n/projectDescription\n#g\n \n$i\n;\n\n\ndone\n\n\n\n\n\n\nAhora tenemos que configurar nuestro Tomcat en Eclipse. Para ello, lo a\u00f1adimos en la vista de servidores.\n\n\nA\u00f1adimos la aplicaci\u00f3n \ndevelop\n al servidor Tomcat que acabamos de configurar y arrancamos Tomcat.\n\n\nSi todo ha ido bien deber\u00edamos poder ver un error 404 que muestra Tomcat en el navegador (\nhttp://localhost:8080/develop\n).\n\n\nEsto es porque el directorio de configuraci\u00f3n de Geoladris no est\u00e1 configurado correctamente. Para ello, paramos el servidor y abrimos las preferencias (\nRun -\n Debug configurations...\n). Buscamos las preferencias de Tomcat y en la pesta\u00f1a de \nEnvironment\n a\u00f1adimos una nueva variable \nGEOLADRIS_CONFIG_DIR\n con el directorio de configuraci\u00f3n.\n\n\nPor \u00faltimo volvemos a arrancar Tomcat y estaremos listos para desarrollar, tanto en servidor como en cliente.\n\n\nFormateando el c\u00f3digo\n\n\nPara Java podemos utilizar el \nfichero de estilo\n de Google.\n\n\nPara JavaScript existe un \nfichero de estilo\n propio con algunas de las \nreglas\n de formateo que utiliza el proyecto.\n\n\nPara aplicar los ficheros de estilos en Eclipse basta con descargar el fichero XML correspondiente e importarlo en Eclipse (\nPreferences\n -\n \nlang\n -\n \nCode Style\n -\n \nFormatter\n -\n \nImport...\n).\n\n\nTambi\u00e9n es posible configurar JSHint en Eclipse de forma que muestre avisos para algunos (no todos) los errores de \neslint\n:\n\n\n{\n\n  \nbrowser\n:\n \ntrue\n,\n\n  \njquery\n:\n \ntrue\n,\n\n  \nnode\n:\n \ntrue\n,\n\n  \ncamelcase\n:\n \ntrue\n,\n\n  \nindent\n:\n \n2\n,\n\n  \nlatedef\n:\n \ntrue\n,\n\n  \nmaxlen\n:\n \n100\n,\n\n  \nnewcap\n:\n \ntrue\n,\n\n  \nquotmark\n:\n \nsingle\n,\n\n  \neqeqeq\n:\n \ntrue\n,\n\n  \neqnull\n:\n \ntrue\n,\n\n  \nundef\n:\n \ntrue\n,\n\n  \nunused\n:\n \ntrue\n,\n\n  \neqnull\n:\n \ntrue\n,\n\n  \nglobals\n \n:\n \n{\n\n    \ndefine\n \n:\n \ntrue\n,\n\n    \ndescribe\n \n:\n \ntrue\n,\n\n    \nbeforeEach\n \n:\n \ntrue\n,\n\n    \nexpect\n \n:\n \ntrue\n,\n\n    \nspyOn\n \n:\n \ntrue\n,\n\n    \nit\n \n:\n \ntrue\n\n  \n}\n\n\n}", 
            "title": "Entorno de desarrollo"
        }, 
        {
            "location": "/dev/environment/#cliente", 
            "text": "En primer lugar tendremos que bajarnos un servidor Tomcat sobre el que correremos la aplicaci\u00f3n. Para esta documentaci\u00f3n hemos utilizado la versi\u00f3n  8.5.27 :  wget http://apache.rediris.es/tomcat/tomcat-8/v8.5.27/bin/apache-tomcat-8.5.27.tar.gz\ntar xzf apache-tomcat-8.5.27.tar.gz  Configuraremos el directorio de Geoladris para Tomcat (ver  m\u00e1s ):  echo   JAVA_OPTS=-DGEOLADRIS_CONFIG_DIR= $PWD /geoladris_config_dir    apache-tomcat-8.5.27/bin/setenv.sh  Despu\u00e9s deberemos descargarnos la  aplicaci\u00f3n  de desarrollo sobre la que trabajaremos:  wget https://oss.sonatype.org/content/repositories/snapshots/com/github/geoladris/apps/develop/7.0.0-SNAPSHOT/develop-7.0.0-20180212.113905-2.war\nmv develop-*.war apache-tomcat-8.5.27/webapps/develop.war  Lo siguiente que tenemos que hacer es preparar un directorio de configuraci\u00f3n. En caso de no disponer de ninguno podemos utilizar este  ejemplo .  Una vez tenemos preparado/descomprimido el directorio de configuraci\u00f3n, clonaremos el repositorio de plugins dentro, de forma que el portal utilice los ficheros cliente del repositorio:  git clone git@github.com:geoladris/plugins.git geoladris_config_dir/develop/plugins  Por \u00faltimo, construiremos los plugins con  yarn  antes de ejecutar:  cd  geoladris_config_dir/develop/plugins for  i in  ` ls */package.json ` ;   do \n   pushd   ` dirname  $i ` \n  yarn\n   popd  done  cd  ../../..  Y arrancaremos Tomcat:  apache-tomcat-8.5.27/bin/catalina.sh start  A partir de ahora podemos modificar los ficheros cliente dentro del directorio de configuraci\u00f3n ( geoladris_config_dir/develop/plugins ) y al recargar el portal se aplicar\u00e1n los cambios.", 
            "title": "Cliente"
        }, 
        {
            "location": "/dev/environment/#servidor", 
            "text": "Para trabajar con el c\u00f3digo del servidor antes tenemos que haber configurado el c\u00f3digo del  cliente . Adem\u00e1s, en caso de que hayamos arrancado Tomcat, antes que nada deberemos pararlo:  apache-tomcat-8.5.27/bin/catalina.sh stop  En primer lugar clonamos el repositorio con la aplicaci\u00f3n de desarrollo ( develop ):  git clone git@github.com:geoladris/apps.git  Luego nos descargamos  Eclipse IDE for Java EE Developers . Para esta gu\u00eda se ha utilizado la versi\u00f3n Oxygen.2 (4.7.2).  Arrancamos Eclipse y configuramos el workspace. Una vez est\u00e1 abierto debemos importar los proyectos que vamos a utilizar. Para esto  basta con importarlos como proyectos Maven ( Project Explorer ,  Import   Import...   Maven   Existing Maven Projects ). Necesitaremos al menos la aplicaci\u00f3n  develop  y el plugin  base . Adem\u00e1s, podemos importar cualquier otro plugin con el que queramos trabajar.   Para el caso particular de los plugins, estos contienen directorios  node  y  node_modules  con una gran cantidad de recursos que ralentizan Eclipse. Para ignorar esos directorios podemos ejecutar el siguiente script bash:   for  i in  ` find geoladris_config_dir/develop/plugins -name .project ` ;   do \n  sed -i  s# /projectDescription # filteredResources filter id `date +%s0000` /id name /name type 10 /type matcher id org.eclipse.ui.ide.multiFilter /id arguments 1.0-name-matches-false-false-node* /arguments /matcher /filter /filteredResources /projectDescription #g   $i ;  done   Ahora tenemos que configurar nuestro Tomcat en Eclipse. Para ello, lo a\u00f1adimos en la vista de servidores.  A\u00f1adimos la aplicaci\u00f3n  develop  al servidor Tomcat que acabamos de configurar y arrancamos Tomcat.  Si todo ha ido bien deber\u00edamos poder ver un error 404 que muestra Tomcat en el navegador ( http://localhost:8080/develop ).  Esto es porque el directorio de configuraci\u00f3n de Geoladris no est\u00e1 configurado correctamente. Para ello, paramos el servidor y abrimos las preferencias ( Run -  Debug configurations... ). Buscamos las preferencias de Tomcat y en la pesta\u00f1a de  Environment  a\u00f1adimos una nueva variable  GEOLADRIS_CONFIG_DIR  con el directorio de configuraci\u00f3n.  Por \u00faltimo volvemos a arrancar Tomcat y estaremos listos para desarrollar, tanto en servidor como en cliente.", 
            "title": "Servidor"
        }, 
        {
            "location": "/dev/environment/#formateando-el-codigo", 
            "text": "Para Java podemos utilizar el  fichero de estilo  de Google.  Para JavaScript existe un  fichero de estilo  propio con algunas de las  reglas  de formateo que utiliza el proyecto.  Para aplicar los ficheros de estilos en Eclipse basta con descargar el fichero XML correspondiente e importarlo en Eclipse ( Preferences  -   lang  -   Code Style  -   Formatter  -   Import... ).  Tambi\u00e9n es posible configurar JSHint en Eclipse de forma que muestre avisos para algunos (no todos) los errores de  eslint :  { \n   browser :   true , \n   jquery :   true , \n   node :   true , \n   camelcase :   true , \n   indent :   2 , \n   latedef :   true , \n   maxlen :   100 , \n   newcap :   true , \n   quotmark :   single , \n   eqeqeq :   true , \n   eqnull :   true , \n   undef :   true , \n   unused :   true , \n   eqnull :   true , \n   globals   :   { \n     define   :   true , \n     describe   :   true , \n     beforeEach   :   true , \n     expect   :   true , \n     spyOn   :   true , \n     it   :   true \n   }  }", 
            "title": "Formateando el c\u00f3digo"
        }, 
        {
            "location": "/dev/plugins/", 
            "text": "Descripci\u00f3n\n\n\nLas aplicaciones Geoladris utilizan una arquitectura cliente/servidor. El servidor utiliza la API Servlet mientras que el cliente utiliza HTML+CSS+Javascript.\n\n\nPodemos encontrar dos tipos b\u00e1sicos de plugins: servidor y cliente.\n\n\nServidor\n\n\nUn plugin servidor es un proyecto Java que aprovecha la \nAPI Servlet 3.1\n en el servidor. Es suficiente tener un paquete \n.jar\n en el \nclasspath\n que contenga un fichero \nweb-fragment.xml\n con los \nservlets\n, filtros, etc. a utilizar por el plugin.\n\n\nCliente\n\n\nUn plugin cliente es un directorio que contiene:\n\n\n\n\nsrc\n: Subdirectorio con m\u00f3dulos RequireJS (\n.js\n) y/o estilos (\n.css\n).\n\n\ncss\n: Subdirectorio con estilos (\n.css\n) que tiene preferencia (se aplican despu\u00e9s) con respecto a \nsrc\n.\n\n\njslib\n: \nDeprecado\n. Subdirectorio con librer\u00edas y estilos externos que \nno\n se pueden gestionar con \nnpm\n.\n\n\n\n\ngeoladris.json\n. Descriptor de plugin. Contiene un objeto JSON con:\n\n\n\n\ninstallInRoot\n: Indica si los m\u00f3dulos RequireJS se instalar\u00e1n en la ra\u00edz de la \nbaseURL\n de RequireJS o dentro de un directorio con el nombre del plugin. Por defecto es \nfalse\n.\nHay que tener en cuenta que el lugar donde se instalen los m\u00f3dulos afecta a la manera en la que otros m\u00f3dulos los referencian. Por ejemplo, un m\u00f3dulo llamado \nmi_modulo\n en un plugin \nmi_plugin\n se referenciar\u00e1 como \nmi_modulo\n si se instala en la ra\u00edz (\ninstallInRoot : true\n) y como  \nmi_plugin/mi_modulo\n en caso contrario (o como \n./mi_modulo\n cuando se referencia por otros m\u00f3dulos del mismo plugin).\n\n\n\n\ndefault-conf\n: Configuraci\u00f3n para los m\u00f3dulos RequireJS. Es un objeto donde los nombres de las propiedades son los nombres de los m\u00f3dulos a configurar y los valores la configuraci\u00f3n a pasarles a dichos m\u00f3dulos. En este fichero es suficiente con especificar \u00fanicamente el nombre del m\u00f3dulo (sin el prefijo del \nplugin\n) independientemente del valor de \ninstallInRoot\n.\n\n\nLa configuraci\u00f3n se puede obtener en el m\u00f3dulo con la pseudodependencia \nmodule\n:\n\n\ndefine\n([\n \nmodule\n \n],\n \nfunction\n(\nmodule\n)\n \n{\n\n  \nvar\n \nconfiguration\n \n=\n \nmodule\n.\nconfig\n();\n\n  \n...\n\n\n});\n\n\n\n\n\n\n\n\n\n\nrequirejs\n: Objeto con configuraci\u00f3n de RequireJS. \u00danicamente tiene en cuenta \npaths\n y \nshim\n. \npaths\n \u00fanicamente deber\u00eda incluir rutas a \nnode_modules\n o \njslib\n (deprecado).\n\n\n\n\ncss\n: Array con las rutas a los estilos de librer\u00edas externas a incluir (\nnode_modules\n o \njslib\n).\n\n\n\n\n\n\n\n\npackage.json\n.\n\n\n\n\n\n\nAdicionalmente puede tener otros recursos propios de cualquier proyecto JavaScript (\nkarma.conf.js\n, \ntest\n, \nyarn.lock\n, ...).\n\n\nH\u00edbridos\n\n\nProyectos que contienen ambos tipos de recurso (Java y JavaScript).\n\n\nPara incluir \nrecursos\n correctamente en el .jar.\n\n\nPara empaquetar recursos correctamente en el \npackage.json\n.\n\n\nNOTA\n: Es importante mencionar que los plugins h\u00edbridos se consideran una mala pr\u00e1ctica, ya que acoplan la funcionalidad de cliente y servidor, mezclando todos los recursos y haciendo m\u00e1s dif\u00edcil trabajar con el plugin.\n\n\nServidor: Configurar la aplicaci\u00f3n mediante programaci\u00f3n\n\n\nEn ocasiones la configuraci\u00f3n de un plugin depende de un valor de la base de datos o, en general, de aspectos que se tienen que comprobar por programaci\u00f3n. \u00bfDe qu\u00e9 manera es posible hacer llegar estos valores a un elemento de la interfaz de usuario? La soluci\u00f3n son los proveedores de configuraci\u00f3n.\n\n\nLos proveedores de configuraci\u00f3n son instancias que implementan la interfaz \norg.geoladris.config.PluginConfigProvider\n que permiten a\u00f1adir elementos a la configuraci\u00f3n de los m\u00f3dulos de la misma manera que se har\u00eda manualmente modificando el fichero \npublic-conf.json\n.\n\n\nPara que la instancia contribuya a la configuraci\u00f3n hay que registrarla en la instancia \nConfig\n, por lo que normalmente se registrar\u00e1 en un \nServletContextListener\n con un c\u00f3digo similar al siguiente:\n\n\nServletContext\n \nservletContext\n \n=\n \nsce\n.\ngetServletContext\n();\n\n\nConfig\n \nconfig\n \n=\n \n(\nConfig\n)\n \nservletContext\n.\ngetAttribute\n(\nGeoladris\n.\nATTR_CONFIG\n);\n\n\nconfig\n.\naddPluginConfigProvider\n(\nnew\n \nMiConfigProvider\n());\n\n\n\n\n\n\nCliente: Testeo\n\n\nJasmine\n como framework de testeo.\n\n\nKarma\n\n\nUtilizamos \nKarma\n como motor de testeo.\n\n\nLos plugins incluyen un fichero \nkarma.conf.js\n como este:\n\n\nmodule\n.\nexports\n \n=\n \nfunction\n(\nconfig\n)\n \n{\n\n    \nconfig\n.\nset\n(\nrequire\n(\n../tests/karma.defaults.js\n));\n\n\n};\n\n\n\n\n\n\nComo se puede ver, \u00fanicamente incluye la \nconfiguraci\u00f3n\n por defecto de los plugins.\n\n\nSi adem\u00e1s de la configuraci\u00f3n por defecto es necesario incluir otros ficheros \n.js\n para el testeo, se puede hacer de la siguiente manera:\n\n\nmodule\n.\nexports\n \n=\n \nfunction\n(\nconfig\n)\n \n{\n\n    \nvar\n \ndefaults\n \n=\n \nrequire\n(\n../tests/karma.defaults.js\n);\n\n    \ndefaults\n.\nfiles\n.\npush\n({\n\n        \npattern\n:\n \nnode_modules/wellknown/wellknown.js\n,\n\n        \nincluded\n:\n \nfalse\n\n    \n});\n\n    \nconfig\n.\nset\n(\ndefaults\n);\n\n\n};\n\n\n\n\n\n\nCuando se ejecute (a trav\u00e9s de la configuraci\u00f3n por defecto) Karma cargar\u00e1 el m\u00f3dulo \ntest-main.js\n, que a su vez cargar\u00e1 todos los tests del directorio \ntest\n.\n\n\nJasmine\n\n\nUtilizamos \nJasmine\n como framework de testeo.\n\n\nPara ello incluimos en el directorio \ntest\n los tests de Jasmine. Aqu\u00ed podemos hacer uso de \ngeoladris-tests.js\n. Es un m\u00f3dulo con un m\u00e9todo \ninit\n que se encarga de inicializar un \ninjector\n de \nSquire\n y el \nmessage-bus\n para poder utilizarlos desde nuestro test:\n\n\ndefine\n([\n \ngeoladris-tests\n \n],\n \nfunction\n(\ntests\n)\n \n{\n\n    \ndescribe\n(\ntest suite name\n,\n \nfunction\n()\n \n{\n\n        \nvar\n \nbus\n;\n\n        \nvar\n \ninjector\n;\n\n\n        \nbeforeEach\n(\nfunction\n(\ndone\n)\n \n{\n\n            \nvar\n \ninitialization\n \n=\n \ntests\n.\ninit\n({\nmodule\n \nconfiguration\n},\n \n{\nmodule\n \npaths\n});\n\n            \ninjector\n \n=\n \ninitialization\n.\ninjector\n;\n\n            \nbus\n \n=\n \ninitialization\n.\nbus\n;\n\n\n            \ninjector\n.\nmock\n(...);\n\n            \n...\n\n\n            \ninjector\n.\nrequire\n([\n \nmodule name\n \n],\n \nfunction\n()\n \n{\n\n                \ndone\n();\n\n            \n});\n\n        \n});\n\n\n        \nit\n(\ntest\n,\n \nfunction\n(\ndone\n)\n \n{\n\n            \ntest\n \ncode\n \nusing\n \njasmine\n\n        \n});\n\n    \n});\n\n\n});\n\n\n\n\n\n\nyarn\n\n\nPor \u00faltimo, configuramos el fichero \npackage.json\n para poder ejecutar (\nyarn run test\n) y depurar (\nyarn run testd\n) los tests:\n\n\n    \nscripts\n:\n \n{\n\n        \ntest\n:\n \nkarma start\n,\n\n        \ntestd\n:\n \nkarma start --single-run=false --auto-watch --browsers=Chrome --reporters=progress\n,\n\n    \n}\n\n\n\n\n\n\nCliente: Traducciones\n\n\nEn los plugins cliente se puede usar i18n. Para ello basta con:\n\n\n\n\n\n\nA\u00f1adir \ni18n\n como dependencia:\n\n\ndefine\n([\n \nmessage-bus\n,\n \ni18n\n,\n \n...\n \n],\n \nfunction\n(\nbus\n,\n \ni18n\n,\n \n...)\n \n{\n\n\n\n\n\n\n\n\n\n\nA\u00f1adir traducciones a los ficheros \nmessages.properties\n en el \ndirectorio de configuraci\u00f3n\n.\n\n\n\n\n\n\nUtilizar las traducciones en nuestro c\u00f3digo:\n\n\nbus\n.\nsend\n(\nerror\n,\n \ni18n\n[\nmy_error_message\n]);", 
            "title": "Plugins"
        }, 
        {
            "location": "/dev/plugins/#descripcion", 
            "text": "Las aplicaciones Geoladris utilizan una arquitectura cliente/servidor. El servidor utiliza la API Servlet mientras que el cliente utiliza HTML+CSS+Javascript.  Podemos encontrar dos tipos b\u00e1sicos de plugins: servidor y cliente.", 
            "title": "Descripci\u00f3n"
        }, 
        {
            "location": "/dev/plugins/#servidor", 
            "text": "Un plugin servidor es un proyecto Java que aprovecha la  API Servlet 3.1  en el servidor. Es suficiente tener un paquete  .jar  en el  classpath  que contenga un fichero  web-fragment.xml  con los  servlets , filtros, etc. a utilizar por el plugin.", 
            "title": "Servidor"
        }, 
        {
            "location": "/dev/plugins/#cliente", 
            "text": "Un plugin cliente es un directorio que contiene:   src : Subdirectorio con m\u00f3dulos RequireJS ( .js ) y/o estilos ( .css ).  css : Subdirectorio con estilos ( .css ) que tiene preferencia (se aplican despu\u00e9s) con respecto a  src .  jslib :  Deprecado . Subdirectorio con librer\u00edas y estilos externos que  no  se pueden gestionar con  npm .   geoladris.json . Descriptor de plugin. Contiene un objeto JSON con:   installInRoot : Indica si los m\u00f3dulos RequireJS se instalar\u00e1n en la ra\u00edz de la  baseURL  de RequireJS o dentro de un directorio con el nombre del plugin. Por defecto es  false .\nHay que tener en cuenta que el lugar donde se instalen los m\u00f3dulos afecta a la manera en la que otros m\u00f3dulos los referencian. Por ejemplo, un m\u00f3dulo llamado  mi_modulo  en un plugin  mi_plugin  se referenciar\u00e1 como  mi_modulo  si se instala en la ra\u00edz ( installInRoot : true ) y como   mi_plugin/mi_modulo  en caso contrario (o como  ./mi_modulo  cuando se referencia por otros m\u00f3dulos del mismo plugin).   default-conf : Configuraci\u00f3n para los m\u00f3dulos RequireJS. Es un objeto donde los nombres de las propiedades son los nombres de los m\u00f3dulos a configurar y los valores la configuraci\u00f3n a pasarles a dichos m\u00f3dulos. En este fichero es suficiente con especificar \u00fanicamente el nombre del m\u00f3dulo (sin el prefijo del  plugin ) independientemente del valor de  installInRoot .  La configuraci\u00f3n se puede obtener en el m\u00f3dulo con la pseudodependencia  module :  define ([   module   ],   function ( module )   { \n   var   configuration   =   module . config (); \n   ...  });     requirejs : Objeto con configuraci\u00f3n de RequireJS. \u00danicamente tiene en cuenta  paths  y  shim .  paths  \u00fanicamente deber\u00eda incluir rutas a  node_modules  o  jslib  (deprecado).   css : Array con las rutas a los estilos de librer\u00edas externas a incluir ( node_modules  o  jslib ).     package.json .    Adicionalmente puede tener otros recursos propios de cualquier proyecto JavaScript ( karma.conf.js ,  test ,  yarn.lock , ...).", 
            "title": "Cliente"
        }, 
        {
            "location": "/dev/plugins/#hibridos", 
            "text": "Proyectos que contienen ambos tipos de recurso (Java y JavaScript).  Para incluir  recursos  correctamente en el .jar.  Para empaquetar recursos correctamente en el  package.json .  NOTA : Es importante mencionar que los plugins h\u00edbridos se consideran una mala pr\u00e1ctica, ya que acoplan la funcionalidad de cliente y servidor, mezclando todos los recursos y haciendo m\u00e1s dif\u00edcil trabajar con el plugin.", 
            "title": "H\u00edbridos"
        }, 
        {
            "location": "/dev/plugins/#servidor-configurar-la-aplicacion-mediante-programacion", 
            "text": "En ocasiones la configuraci\u00f3n de un plugin depende de un valor de la base de datos o, en general, de aspectos que se tienen que comprobar por programaci\u00f3n. \u00bfDe qu\u00e9 manera es posible hacer llegar estos valores a un elemento de la interfaz de usuario? La soluci\u00f3n son los proveedores de configuraci\u00f3n.  Los proveedores de configuraci\u00f3n son instancias que implementan la interfaz  org.geoladris.config.PluginConfigProvider  que permiten a\u00f1adir elementos a la configuraci\u00f3n de los m\u00f3dulos de la misma manera que se har\u00eda manualmente modificando el fichero  public-conf.json .  Para que la instancia contribuya a la configuraci\u00f3n hay que registrarla en la instancia  Config , por lo que normalmente se registrar\u00e1 en un  ServletContextListener  con un c\u00f3digo similar al siguiente:  ServletContext   servletContext   =   sce . getServletContext ();  Config   config   =   ( Config )   servletContext . getAttribute ( Geoladris . ATTR_CONFIG );  config . addPluginConfigProvider ( new   MiConfigProvider ());", 
            "title": "Servidor: Configurar la aplicaci\u00f3n mediante programaci\u00f3n"
        }, 
        {
            "location": "/dev/plugins/#cliente-testeo", 
            "text": "Jasmine  como framework de testeo.", 
            "title": "Cliente: Testeo"
        }, 
        {
            "location": "/dev/plugins/#karma", 
            "text": "Utilizamos  Karma  como motor de testeo.  Los plugins incluyen un fichero  karma.conf.js  como este:  module . exports   =   function ( config )   { \n     config . set ( require ( ../tests/karma.defaults.js ));  };   Como se puede ver, \u00fanicamente incluye la  configuraci\u00f3n  por defecto de los plugins.  Si adem\u00e1s de la configuraci\u00f3n por defecto es necesario incluir otros ficheros  .js  para el testeo, se puede hacer de la siguiente manera:  module . exports   =   function ( config )   { \n     var   defaults   =   require ( ../tests/karma.defaults.js ); \n     defaults . files . push ({ \n         pattern :   node_modules/wellknown/wellknown.js , \n         included :   false \n     }); \n     config . set ( defaults );  };   Cuando se ejecute (a trav\u00e9s de la configuraci\u00f3n por defecto) Karma cargar\u00e1 el m\u00f3dulo  test-main.js , que a su vez cargar\u00e1 todos los tests del directorio  test .", 
            "title": "Karma"
        }, 
        {
            "location": "/dev/plugins/#jasmine", 
            "text": "Utilizamos  Jasmine  como framework de testeo.  Para ello incluimos en el directorio  test  los tests de Jasmine. Aqu\u00ed podemos hacer uso de  geoladris-tests.js . Es un m\u00f3dulo con un m\u00e9todo  init  que se encarga de inicializar un  injector  de  Squire  y el  message-bus  para poder utilizarlos desde nuestro test:  define ([   geoladris-tests   ],   function ( tests )   { \n     describe ( test suite name ,   function ()   { \n         var   bus ; \n         var   injector ; \n\n         beforeEach ( function ( done )   { \n             var   initialization   =   tests . init ({ module   configuration },   { module   paths }); \n             injector   =   initialization . injector ; \n             bus   =   initialization . bus ; \n\n             injector . mock (...); \n             ... \n\n             injector . require ([   module name   ],   function ()   { \n                 done (); \n             }); \n         }); \n\n         it ( test ,   function ( done )   { \n             test   code   using   jasmine \n         }); \n     });  });", 
            "title": "Jasmine"
        }, 
        {
            "location": "/dev/plugins/#yarn", 
            "text": "Por \u00faltimo, configuramos el fichero  package.json  para poder ejecutar ( yarn run test ) y depurar ( yarn run testd ) los tests:       scripts :   { \n         test :   karma start , \n         testd :   karma start --single-run=false --auto-watch --browsers=Chrome --reporters=progress , \n     }", 
            "title": "yarn"
        }, 
        {
            "location": "/dev/plugins/#cliente-traducciones", 
            "text": "En los plugins cliente se puede usar i18n. Para ello basta con:    A\u00f1adir  i18n  como dependencia:  define ([   message-bus ,   i18n ,   ...   ],   function ( bus ,   i18n ,   ...)   {     A\u00f1adir traducciones a los ficheros  messages.properties  en el  directorio de configuraci\u00f3n .    Utilizar las traducciones en nuestro c\u00f3digo:  bus . send ( error ,   i18n [ my_error_message ]);", 
            "title": "Cliente: Traducciones"
        }, 
        {
            "location": "/dev/apps/", 
            "text": "Existe un \nscript\n para la generaci\u00f3n de aplicaciones de manera sencilla. Esta documentaci\u00f3n es \u00fatil para crear aplicaciones con necesidades espec\u00edficas que el script no cubre o para entender el funcionamiento de las aplicaciones del \nrepositorio\n de Geoladris.\n\n\nEstructura de una aplicaci\u00f3n\n\n\nUna aplicaci\u00f3n Geoladris contiene los siguientes ficheros/directorios:\n\n\n\n\n\n\npackage.json\n: Fichero de configuraci\u00f3n de yarn. Aqu\u00ed se deben incluir los plugins \ncliente\n como dependencias:\n\n\ndependencies\n:\n \n{\n\n  \n@csgeoladris/ui\n:\n \ncsgis/geoladris-ui#master\n,\n\n  \n@geoladris/core\n:\n \ngeoladris/core#master\n,\n\n  \n@geoladris/base\n:\n \nfile:../../plugins/base\n,\n\n  \n...\n\n\n}\n\n\n\n\n\n\nAdem\u00e1s se debe incluir un script para el empaquetado de recursos cliente:\n\n\nscripts\n:\n \n{\n\n  \nbuild\n:\n \ngl-build-app.js \n r.js -o .requirejs-build.js\n\n\n}\n\n\n\n\n\n\n\n\n\n\npom.xml\n: Fichero de configuraci\u00f3n de Maven. Aqu\u00ed se deben incluir los plugins \nservidor\n como dependencias:\n\n\ndependencies\n\n  ...\n  \ndependency\n\n    \ngroupId\norg.fao.unredd\n/groupId\n\n    \nartifactId\nlayers-editor\n/artifactId\n\n    \nversion\n${plugins.version}\n/version\n\n  \n/dependency\n\n  ...\n\n/dependencies\n\n\n\n\n\n\nTambi\u00e9n se debe incluir el plugin \nfrontend-maven-plugin\n para ejecutar el script de \nbuild\n de \nyarn\n:\n\n\nbuild\n\n    \nplugins\n\n        \nplugin\n\n            \ngroupId\ncom.github.eirslett\n/groupId\n\n            \nartifactId\nfrontend-maven-plugin\n/artifactId\n\n            \nversion\n1.4\n/version\n\n            \nexecutions\n\n                \nexecution\n\n                    \nid\ninstall-node-and-yarn\n/id\n\n                    \ngoals\n\n                      \ngoal\ninstall-node-and-yarn\n/goal\n\n                    \n/goals\n\n                    \nconfiguration\n\n                        \nnodeVersion\n${node.version}\n/nodeVersion\n\n                        \nyarnVersion\n${yarn.version}\n/yarnVersion\n\n                    \n/configuration\n\n                \n/execution\n\n                \nexecution\n\n                    \nid\nyarn install\n/id\n\n                    \ngoals\n\n                      \ngoal\nyarn\n/goal\n\n                    \n/goals\n\n                    \nconfiguration\n\n                      \narguments\ninstall\n/arguments\n\n                    \n/configuration\n\n                \n/execution\n\n                \nexecution\n\n                    \nid\nyarn-build\n/id\n\n                    \ngoals\n\n                        \ngoal\nyarn\n/goal\n\n                    \n/goals\n\n                    \nphase\nprepare-package\n/phase\n\n                    \nconfiguration\n\n                      \narguments\nrun build\n/arguments\n\n                    \n/configuration\n\n                \n/execution\n\n            \n/executions\n\n        \n/plugin\n\n    \n/plugins\n\n\n/build\n\n\n\n\n\n\n\n\n\n\nyarn.lock\n: \nSiempre\n se deben incluir estos ficheros en el repositorio.\n\n\n\n\nsrc/main/webapp/META-INF/context.xml\n: Fichero de configuraci\u00f3n de \nTomcat\n.\n\n\nsrc/main/webapp/WEB-INF/web.xml\n: \nDescriptor\n de aplicaci\u00f3n.\n\n\nsrc/main/webapp/WEB-INF/default_config\n: \nDirectorio de configuraci\u00f3n\n por defecto. Opcional.\n\n\n\n\nEmpaquetar\n\n\nEl \ncore\n de Geoladris se encarga de empaquetar todos los recursos tanto Java (servlets, filtros, listeners,...) como JavaScript (copiar m\u00f3dulos, estilos, dependencias, etc. a \nsrc/main/webapp\n para empaquetarlos dentro del war y servirlos con Tomcat) y minificar los recursos est\u00e1ticos.\n\n\nLos \nplugins JavaScript\n se gestionan con herramientas de JavaScript. El flujo de trabajo es:\n\n\n\n\nIncluir plugins en \ndependencies\n dentro del \npackage.json\n.\n\n\nyarn install\n para gestionar todas las dependencias.\n\n\ngl-build-app.js\n. Es un script propio de \ncore\n que:\n\n\nCopia los plugins definidos en la opci\u00f3n \ndependencies\n del \npackage.json\n dentro de \nsrc/main/webapp\n; tambi\u00e9n copia las dependencias (\n*.js\n y \n*.css\n).\n\n\nGenera el fichero \napp.min.css\n con  todos los estilos (de menos a m\u00e1s prioridad: dependencias, \nsrc\n y \ncss\n).\n\n\nGenera el fichero \nmain.js\n de RequireJS que se sirve en la aplicaci\u00f3n final (solo con \ndebug=true\n).\n\n\nGenera el fichero \nindex.html\n.\n\n\nGenera un fichero \n.requirejs-build.js\n para minificar m\u00f3dulos RequireJS, teniendo en cuenta la configuraci\u00f3n de \nrequirejs\n en los \ngeoladris.json\n de los plugins.\n\n\n\n\n\n\nr.js -o build.js\n. Genera \nsrc/main/webapp/app.min.js\n con la minificaci\u00f3n de los recursos JavaScript a partir del \n.requirejs-build.js\n generado por \ngl-build-app.js\n.\n\n\n\n\nLos \nplugins Java\n se gestionan simplemente incluy\u00e9ndolos como dependencias en el \npom.xml\n.\n\n\nEl build de plugins JavaScript se incluye como parte del \nbuild\n de Maven con un plugin. Por tanto, basta con hacer \nmvn package\n para empaquetarlo todo.\n\n\nServir\n\n\nUna vez desplegada la aplicaci\u00f3n \n.war\n en Tomcat, el \ncore\n de Geoladris tambi\u00e9n se encarga de servir todos los recursos est\u00e1ticos (plugins empaquetados en el war, plugins en el directorio de configuraci\u00f3n, ficheros est\u00e1ticos en el directorio de configuraci\u00f3n,...) y din\u00e1micos (\nconfig.js\n, ...). Son los siguientes:\n\n\nRecursos est\u00e1ticos gestionados directamente por Tomcat (por estar en \nsrc/main/webapp\n):\n\n\n\n\nsrc/main/webapp/app.min.js\n\n\nsrc/main/webapp/app.min.css\n\n\nsrc/main/webapp/index.html\n\n\nsrc/main/webapp/*.js\n\n\nsrc/main/webapp/geoladris/*\n\n\n\n\nRecursos est\u00e1ticos fuera del \nwar\n. Configurado autom\u00e1ticamente para Tomcat 8.x y 9.x:\n\n\n\n\nconfig_dir\n/plugins/\n. Bajo el path \n/plugins/*\n.\n\n\nconfig_dir\n/static/\n. Bajo el path \n/static/*\n. Inhabilita \nsrc/main/webapp/static\n.\n\n\n\n\nconfig.js\n (con un servlet), que es din\u00e1mico porque puede depender, por ejemplo, del usuario.", 
            "title": "Aplicaciones"
        }, 
        {
            "location": "/dev/apps/#estructura-de-una-aplicacion", 
            "text": "Una aplicaci\u00f3n Geoladris contiene los siguientes ficheros/directorios:    package.json : Fichero de configuraci\u00f3n de yarn. Aqu\u00ed se deben incluir los plugins  cliente  como dependencias:  dependencies :   { \n   @csgeoladris/ui :   csgis/geoladris-ui#master , \n   @geoladris/core :   geoladris/core#master , \n   @geoladris/base :   file:../../plugins/base , \n   ...  }   Adem\u00e1s se debe incluir un script para el empaquetado de recursos cliente:  scripts :   { \n   build :   gl-build-app.js   r.js -o .requirejs-build.js  }     pom.xml : Fichero de configuraci\u00f3n de Maven. Aqu\u00ed se deben incluir los plugins  servidor  como dependencias:  dependencies \n  ...\n   dependency \n     groupId org.fao.unredd /groupId \n     artifactId layers-editor /artifactId \n     version ${plugins.version} /version \n   /dependency \n  ... /dependencies   Tambi\u00e9n se debe incluir el plugin  frontend-maven-plugin  para ejecutar el script de  build  de  yarn :  build \n     plugins \n         plugin \n             groupId com.github.eirslett /groupId \n             artifactId frontend-maven-plugin /artifactId \n             version 1.4 /version \n             executions \n                 execution \n                     id install-node-and-yarn /id \n                     goals \n                       goal install-node-and-yarn /goal \n                     /goals \n                     configuration \n                         nodeVersion ${node.version} /nodeVersion \n                         yarnVersion ${yarn.version} /yarnVersion \n                     /configuration \n                 /execution \n                 execution \n                     id yarn install /id \n                     goals \n                       goal yarn /goal \n                     /goals \n                     configuration \n                       arguments install /arguments \n                     /configuration \n                 /execution \n                 execution \n                     id yarn-build /id \n                     goals \n                         goal yarn /goal \n                     /goals \n                     phase prepare-package /phase \n                     configuration \n                       arguments run build /arguments \n                     /configuration \n                 /execution \n             /executions \n         /plugin \n     /plugins  /build     yarn.lock :  Siempre  se deben incluir estos ficheros en el repositorio.   src/main/webapp/META-INF/context.xml : Fichero de configuraci\u00f3n de  Tomcat .  src/main/webapp/WEB-INF/web.xml :  Descriptor  de aplicaci\u00f3n.  src/main/webapp/WEB-INF/default_config :  Directorio de configuraci\u00f3n  por defecto. Opcional.", 
            "title": "Estructura de una aplicaci\u00f3n"
        }, 
        {
            "location": "/dev/apps/#empaquetar", 
            "text": "El  core  de Geoladris se encarga de empaquetar todos los recursos tanto Java (servlets, filtros, listeners,...) como JavaScript (copiar m\u00f3dulos, estilos, dependencias, etc. a  src/main/webapp  para empaquetarlos dentro del war y servirlos con Tomcat) y minificar los recursos est\u00e1ticos.  Los  plugins JavaScript  se gestionan con herramientas de JavaScript. El flujo de trabajo es:   Incluir plugins en  dependencies  dentro del  package.json .  yarn install  para gestionar todas las dependencias.  gl-build-app.js . Es un script propio de  core  que:  Copia los plugins definidos en la opci\u00f3n  dependencies  del  package.json  dentro de  src/main/webapp ; tambi\u00e9n copia las dependencias ( *.js  y  *.css ).  Genera el fichero  app.min.css  con  todos los estilos (de menos a m\u00e1s prioridad: dependencias,  src  y  css ).  Genera el fichero  main.js  de RequireJS que se sirve en la aplicaci\u00f3n final (solo con  debug=true ).  Genera el fichero  index.html .  Genera un fichero  .requirejs-build.js  para minificar m\u00f3dulos RequireJS, teniendo en cuenta la configuraci\u00f3n de  requirejs  en los  geoladris.json  de los plugins.    r.js -o build.js . Genera  src/main/webapp/app.min.js  con la minificaci\u00f3n de los recursos JavaScript a partir del  .requirejs-build.js  generado por  gl-build-app.js .   Los  plugins Java  se gestionan simplemente incluy\u00e9ndolos como dependencias en el  pom.xml .  El build de plugins JavaScript se incluye como parte del  build  de Maven con un plugin. Por tanto, basta con hacer  mvn package  para empaquetarlo todo.", 
            "title": "Empaquetar"
        }, 
        {
            "location": "/dev/apps/#servir", 
            "text": "Una vez desplegada la aplicaci\u00f3n  .war  en Tomcat, el  core  de Geoladris tambi\u00e9n se encarga de servir todos los recursos est\u00e1ticos (plugins empaquetados en el war, plugins en el directorio de configuraci\u00f3n, ficheros est\u00e1ticos en el directorio de configuraci\u00f3n,...) y din\u00e1micos ( config.js , ...). Son los siguientes:  Recursos est\u00e1ticos gestionados directamente por Tomcat (por estar en  src/main/webapp ):   src/main/webapp/app.min.js  src/main/webapp/app.min.css  src/main/webapp/index.html  src/main/webapp/*.js  src/main/webapp/geoladris/*   Recursos est\u00e1ticos fuera del  war . Configurado autom\u00e1ticamente para Tomcat 8.x y 9.x:   config_dir /plugins/ . Bajo el path  /plugins/* .  config_dir /static/ . Bajo el path  /static/* . Inhabilita  src/main/webapp/static .   config.js  (con un servlet), que es din\u00e1mico porque puede depender, por ejemplo, del usuario.", 
            "title": "Servir"
        }, 
        {
            "location": "/dev/migrate/", 
            "text": "Migrando a la versi\u00f3n 6.x\n\n\nA partir de la versi\u00f3n 6.0.0, todos los plugins deben contenterse en un subdirectorio con el nombre del plugin, dentro de \ngeoladris\n o \nplugins\n (en funci\u00f3n de su empaquetado; ver \nplugins\n).\n\n\nPlugins empaquetados como \n.jar\n\n\nAnteriormente, los recursos de un plugin empaquetado como jar estaban directamente dentro de \ngeoladris\n, por lo que un plugin de este tipo que funciona con la versi\u00f3n 5.0.0 no ser\u00e1 v\u00e1lido para la versi\u00f3n 6.0.0.\n\n\nPara migrar a la versi\u00f3n 6.x bastar\u00e1 con crear un subdirectorio con el nombre de nuestro plugin dentro de \ngeoladris\n y mover todos los recursos ah\u00ed.\n\n\nPor ejemplo, para un plugin empaquetado como jar, en la versi\u00f3n 5.0.0 tendr\u00edamos algo como esto:\n\n\n\n\nque deber\u00edamos transformar a:\n\n\n\n\nModuleConfigurationProviders\n\n\nEn el caso de que se hayan desarrollado \nModuleConfigurationProvider\n propios, estos deben a\u00f1adirse a la aplicaci\u00f3n de manera distinta. Anteriormente se a\u00f1ad\u00edan a un objeto \nConfig\n en un \nServletContextListener\n:\n\n\n@Override\n\n\npublic\n \nvoid\n \ncontextInitialized\n(\nServletContextEvent\n \nsce\n)\n \n{\n\n  \nConfig\n \nconfig\n \n=\n \n(\nConfig\n)\n\n    \nsce\n.\ngetServletContext\n().\ngetAttribute\n(\nAppContextListener\n.\nATTR_CONFIG\n);\n\n  \nconfig\n.\naddModuleConfigurationProvider\n(\nnew\n \nLayersModuleConfigurationProvider\n());\n\n\n}\n\n\n\n\n\n\nAhora se a\u00f1aden directamente a una lista en el \nServletContext\n:\n\n\n@SuppressWarnings\n(\nunchecked\n)\n\n\n@Override\n\n\npublic\n \nvoid\n \ncontextInitialized\n(\nServletContextEvent\n \nsce\n)\n \n{\n\n  \nList\nModuleConfigurationProvider\n \nproviders\n \n=\n \n(\nList\nModuleConfigurationProvider\n)\n\n    \nsce\n.\ngetServletContext\n().\ngetAttribute\n(\nGeoladris\n.\nATTR_CONFIG_PROVIDERS\n);\n\n  \nproviders\n.\nadd\n(\nnew\n \nLayersModuleConfigurationProvider\n());\n\n\n}\n\n\n\n\n\n\nPlugins empaquetados en el directorio de configuraci\u00f3n\n\n\nEn este caso, los plugins ya estaban dentro de un subdirectorio de \nplugins\n en la versi\u00f3n 5.x, por lo que funcionar\u00e1n en la versi\u00f3n 6.x sin ning\u00fan cambio.\n\n\nMigrando a la versi\u00f3n 7.x\n\n\nPlugins\n\n\nLa estructura de los plugins cliente ha cambiado completamente (ver \nplugins\n). Para la migraci\u00f3n habr\u00eda que:\n\n\n\n\nMover m\u00f3dulos de \nsrc/main/resources/geoladris/\nplugin\n/modules\n a \nsrc\n.\n\n\nGestionar las dependencias con \npackage.json\n/\nyarn\n.\n\n\n\n\nTodav\u00eda es posible gestionar las dependencias de manera manual (en \njslib\n en lugar de \nsrc/main/resources/geoladris/\nplugin\n/jslib\n), aunque en un futuro esta opci\u00f3n desaparecer\u00e1.\n\n\nAplicaciones\n\n\nLas dependencias de las aplicaciones se gestionan ahora conjuntamente con Maven y \nyarn\n (ver \naplicaciones\n), por lo que su definici\u00f3n y empaquetado cambian.\n\n\n\n\nIncluir dependencias cliente en \npackage.json\n.\n\n\nIncluir dependencias servidor en \npom.xml\n.\n\n\nIncluir dependencias h\u00edbridas (cliente y servidor juntos) en ambos ficheros.\n\n\nConfigurar el plugin \ncom.github.eirslett:frontend-maven-plugin\n en \npom.xml\n (ver \nejemplo\n).\n\n\n\n\nUna vez hecho esto, basta con ejecutar \nmvn package\n para minificar y empaquetar todos los recursos (cliente y servidor) en un \u00fanico paquete \n.war\n.", 
            "title": "Migraci\u00f3n"
        }, 
        {
            "location": "/dev/migrate/#migrando-a-la-version-6x", 
            "text": "A partir de la versi\u00f3n 6.0.0, todos los plugins deben contenterse en un subdirectorio con el nombre del plugin, dentro de  geoladris  o  plugins  (en funci\u00f3n de su empaquetado; ver  plugins ).", 
            "title": "Migrando a la versi\u00f3n 6.x"
        }, 
        {
            "location": "/dev/migrate/#plugins-empaquetados-como-jar", 
            "text": "Anteriormente, los recursos de un plugin empaquetado como jar estaban directamente dentro de  geoladris , por lo que un plugin de este tipo que funciona con la versi\u00f3n 5.0.0 no ser\u00e1 v\u00e1lido para la versi\u00f3n 6.0.0.  Para migrar a la versi\u00f3n 6.x bastar\u00e1 con crear un subdirectorio con el nombre de nuestro plugin dentro de  geoladris  y mover todos los recursos ah\u00ed.  Por ejemplo, para un plugin empaquetado como jar, en la versi\u00f3n 5.0.0 tendr\u00edamos algo como esto:   que deber\u00edamos transformar a:", 
            "title": "Plugins empaquetados como .jar"
        }, 
        {
            "location": "/dev/migrate/#plugins-empaquetados-en-el-directorio-de-configuracion", 
            "text": "En este caso, los plugins ya estaban dentro de un subdirectorio de  plugins  en la versi\u00f3n 5.x, por lo que funcionar\u00e1n en la versi\u00f3n 6.x sin ning\u00fan cambio.", 
            "title": "Plugins empaquetados en el directorio de configuraci\u00f3n"
        }, 
        {
            "location": "/dev/migrate/#migrando-a-la-version-7x", 
            "text": "", 
            "title": "Migrando a la versi\u00f3n 7.x"
        }, 
        {
            "location": "/dev/migrate/#plugins", 
            "text": "La estructura de los plugins cliente ha cambiado completamente (ver  plugins ). Para la migraci\u00f3n habr\u00eda que:   Mover m\u00f3dulos de  src/main/resources/geoladris/ plugin /modules  a  src .  Gestionar las dependencias con  package.json / yarn .   Todav\u00eda es posible gestionar las dependencias de manera manual (en  jslib  en lugar de  src/main/resources/geoladris/ plugin /jslib ), aunque en un futuro esta opci\u00f3n desaparecer\u00e1.", 
            "title": "Plugins"
        }, 
        {
            "location": "/dev/migrate/#aplicaciones", 
            "text": "Las dependencias de las aplicaciones se gestionan ahora conjuntamente con Maven y  yarn  (ver  aplicaciones ), por lo que su definici\u00f3n y empaquetado cambian.   Incluir dependencias cliente en  package.json .  Incluir dependencias servidor en  pom.xml .  Incluir dependencias h\u00edbridas (cliente y servidor juntos) en ambos ficheros.  Configurar el plugin  com.github.eirslett:frontend-maven-plugin  en  pom.xml  (ver  ejemplo ).   Una vez hecho esto, basta con ejecutar  mvn package  para minificar y empaquetar todos los recursos (cliente y servidor) en un \u00fanico paquete  .war .", 
            "title": "Aplicaciones"
        }, 
        {
            "location": "/dev/releases/", 
            "text": "Frecuencia de publicaciones\n\n\nEn Geoladris no tenemos una frecuencia de publicaci\u00f3n constante, sino que publicamos en funci\u00f3n de las necesidades de los usuarios.\n\n\nEl proceso de publicaci\u00f3n se inicia simplemente con una conversaci\u00f3n en la \nlista de correo\n de desarrollo en la que se acuerda la versi\u00f3n de la nueva release y la fecha aproximada de la misma.\n\n\n\u00bfNeces\u00edtas una nueva versi\u00f3n? \nEscr\u00edbenos\n.\n\n\nProceso\n\n\nEl proceso que se describe aqu\u00ed incluye \u00fanicamente un repositorio (\ncore\n \no\n \nplugins\n \no\n \napps\n). Para publicar todos los repositorioes habr\u00e1 que llevar este proceso en paralelo para todos ellos.\n\n\nAcordar una versi\u00f3n y una fecha\n\n\nA trav\u00e9s de la \nlista de correo\n se acuerda la siguiente versi\u00f3n que se va a publicar y una fecha aproximada de cu\u00e1ndo va a ocurrir.\n\n\nPara decidir qu\u00e9 versi\u00f3n publicar se puede revisar el \nchangelog\n donde se incluyen los cambios que se han ido a\u00f1adiendo a cada una de las versiones sin publicar.\n\n\nPreparar milestone en el repositorio\n\n\nLas versiones se gestionan a traves de milestones en el repositorio de Github. Una vez se ha acordado por la lista de correo, habr\u00e1 que crear una milestone con la versi\u00f3n y la fecha acordadas.\n\n\nPreparar la rama de release\n\n\nUna vez se ha decidido la versi\u00f3n, hay que preparar la rama en el repositorio. Lo hacemos de una manera similar a \nGeoServer\n.\n\n\n\u00danicamente debemos buscar la rama que se corresponde a la versi\u00f3n que queremos publicar. Por ejemplo, si queremos publicar la versi\u00f3n \n7.1.0\n deberemos buscar la rama que tenga la versi\u00f3n \n7.1.0-SNAPSHOT\n en el fichero \npom.xml\n. Esta rama \u00fanicamente puede ser \nmaster\n o \n7.1.x\n.\n\n\nEn caso de que la rama con la versi\u00f3n a publicar sea \nmaster\n deberemos crear la rama \n7.1.x\n:\n\n\ngit checkout master\ngit checkout -b \n7\n.1.x\ngit push -u origin \n7\n.1.x\n\n\n\n\n\ny dejar la rama \nmaster\n preparada para seguir desarrollando la \n7.2.0-SNAPSHOT\n:\n\n\ngit checkout master\nmvn versions:set -DnewVersion\n=\n7\n.2.0-SNAPSHOT\nyarn version --no-git-tag-version --new-version \n7\n.2.0-SNAPSHOT\nrm \n`\ngit status \n|\n grep pom.xml.versionsBackup\n`\n\ngit add .\ngit commit -m \nBump version to 7.2.0-SNAPSHOT\n\ngit push\n\n\n\n\n\nPreparar la rama de documentaci\u00f3n\n\n\nPara tener documentaci\u00f3n de todas las versiones utilizamos ramas y tags como un repositorio de desarrollo que luego publicaremos en \nReadTheDocs\n.\n\n\nEl proceso es id\u00e9ntico al de la \nrama de release\n pero sin necesidad de actualizar versiones. Si hemos tenido que crear la rama de release a partir de \nmaster\n para el desarrollo, lo haremos aqu\u00ed tambi\u00e9n:\n\n\ngit checkout master\ngit checkout -b \n7\n.1.x\ngit push -u origin \n7\n.1.x\n\n\n\n\n\nCorrecciones de \u00faltima hora\n\n\nUna vez las ramas est\u00e1n listas para el despliegue se probar\u00e1 todo bien y se har\u00e1n cambios de \u00faltima hora.\n\n\nLos \u00fanicos cambios que se pueden introducir son correcciones de errores.\n\n\nTodos los cambios que afecten a la publicaci\u00f3n de la versi\u00f3n deber\u00e1n tener asociada una issue en GitHub. La issue deber\u00e1 pertenecer siempre a la milestone de la versi\u00f3n.\n\n\nTodos los cambios hay que documentarlos inmediatamente en el changelog.\n\n\nDesplegar\n\n\nCuando el software est\u00e9 listo para el despliegue, en primer lugar actualizaremos las dependencias entre proyectos para Maven (\npom.xml\n) y npm (\npackage.json\n). Por ejemplo, si estamos desplegando la versi\u00f3n \n7.1.0\n, en el \npom.xml\n y \npackage.json\n de nuestros plugins deberemos sustituir las versiones de desarrollo (\n7.1.0-SNAPSHOT\n/\n7.1.0-alpha.x\n) por la versi\u00f3n final (\n7.1.0\n).\n\n\nEn caso de actualizar alg\u00fan fichero \npackage.json\n hay que recordar volver a ejecutar \nyarn\n para actualizar el fichero \nyarn.lock\n y subirlo al repositorio tambi\u00e9n.\n\n\nUna vez todas las versiones est\u00e1n listas, actualizaremos la rama de release con la versi\u00f3n definitiva y la publicaremos:\n\n\n# Bump\n\ngit checkout \n7\n.1.x\nmvn versions:set -DnewVersion\n=\n7\n.1.0\nyarn version --no-git-tag-version --new-version \n7\n.1.0\nrm \n`\ngit status \n|\n grep pom.xml.versionsBackup\n`\n\n\n\n# Commit\n\ngit add .\ngit commit -m \nBump version to 7.1.0\n\n\n\n# Push\n\ngit tag v7.1.0\ngit push\ngit push --tags\n\n\n\n\n\nEn el caso de repositorios con m\u00faltiples suproyectos, adem\u00e1s deberemos cambiar la versi\u00f3n en todos los subdirectorios:\n\n\nfor\n i in \n`\nls */package.json\n`\n;\n \ndo\n\n  \npushd\n \n`\ndirname \n$i\n`\n;\n\n  yarn version --no-git-tag-version --new-version \n7\n.1.0\n;\n\n  popd\n;\n\n\ndone\n\n\n\n\n\n\nEl despliegue de los artefactos Java se deber\u00eda realizar autom\u00e1ticamente con Travis. Deberemos esperar a que Travis env\u00ede el correo de notificaci\u00f3n de \u00e9xito y luego comprobar que los artefactos se han publicado correctamente en \nMaven\n (la publicaci\u00f3n de artefactos en el repositorio central de Maven puede tardar hasta 10 minutos).\n\n\nSin embargo, la publicaci\u00f3n de paquetes JavaScript ha de ser manual. Para ello, deberemos ejecutar la siguiente instrucci\u00f3n:\n\n\nyarn publish --no-git-tag-version --access public --new-version \n7\n.1.0\n\n\n\n\n\no, para repositorios con m\u00faltiples proyectos:\n\n\nfor\n i in \n`\nls */package.json\n`\n;\n \ndo\n\n  \npushd\n \n`\ndirname \n$i\n`\n;\n\n  yarn publish --no-git-tag-version --access public --new-version \n7\n.1.0\n;\n\n  popd\n;\n\n\ndone\n\n\n\n\n\n\nDespu\u00e9s comprobaremos que los paquetes se han subido correctamente a \nnpmjs\n.\n\n\nPara terminar, dejaremos la rama de release preparada con la siguiente versi\u00f3n (patch version++):\n\n\nmvn versions:set -DnewVersion\n=\n7\n.1.1-SNAPSHOT\nyarn version --no-git-tag-version --new-version \n7\n.1.1-SNAPSHOT\nrm \n`\ngit status \n|\n grep pom.xml.versionsBackup\n`\n\ngit add .\ngit commit -m \nBump version to 7.1.1-SNAPSHOT\n\ngit push\n\n\n\n\n\ny, para repositorios con subdirectorios:\n\n\nfor\n i in \n`\nls */package.json\n`\n;\n \ndo\n\n  \npushd\n \n`\ndirname \n$i\n`\n;\n\n  yarn version --no-git-tag-version --new-version \n7\n.1.1-SNAPSHOT\n;\n\n  popd\n;\n\n\ndone\n\n\n\n\n\n\nActualizar documentaci\u00f3n\n\n\nUna vez la versi\u00f3n est\u00e1 publicada, deberemos actualizar la documentaci\u00f3n. Las tareas a realizar son:\n\n\n\n\n\n\nActualizar el changelog con las nuevas versiones, incluyendo fecha de publicaci\u00f3n.\n\n\n\n\n\n\nActualizar los enlaces (la \ngu\u00eda r\u00e1pida\n, la \nsecci\u00f3n de descargas\n).\n\n\n\n\n\n\nCrear un tag en el repositorio de documentaci\u00f3n:\n\n\n\n\n\n\ngit checkout \n7\n.1.x\ngit tag v7.1.0\ngit push --tags\n\n\n\n\n\n\n\n\n\nA\u00f1adir una versi\u00f3n en ReadTheDocs con el nuevo tag.\n\n\n\n\n\n\nMezclar cambios de la documentaci\u00f3n en \nmaster\n (al menos el changelog).\n\n\n\n\n\n\nEnviar mensaje a la lista de correo\n\n\nPor \u00faltimo, es necesario enviar un correo a la lista. Se puede utilizar la siguiente plantilla:\n\n\nAsunto\n: Nueva versi\u00f3n \nversi\u00f3n\n\n\nMensaje\n:\n\n\nHola a todos,\n\n\nAcabamos de publicar una nueva versi\u00f3n de Geoladris, la versi\u00f3n \nversi\u00f3n\n.\n\n\nPod\u00e9is encontrar los cambios que trae esta nueva versi\u00f3n en https://geoladris.github.io/doc/ref/changelog/.\n\n\nLa documentaci\u00f3n general la encontrar\u00e9is en https://geoladris.github.io/doc/.\n\n\nY la documentaci\u00f3n sobre versiones anteriores est\u00e1 disponible en ReadTheDocs: https://readthedocs.org/projects/geoladris/.\n\n\nSaludos.", 
            "title": "Publicaci\u00f3n"
        }, 
        {
            "location": "/dev/releases/#frecuencia-de-publicaciones", 
            "text": "En Geoladris no tenemos una frecuencia de publicaci\u00f3n constante, sino que publicamos en funci\u00f3n de las necesidades de los usuarios.  El proceso de publicaci\u00f3n se inicia simplemente con una conversaci\u00f3n en la  lista de correo  de desarrollo en la que se acuerda la versi\u00f3n de la nueva release y la fecha aproximada de la misma.  \u00bfNeces\u00edtas una nueva versi\u00f3n?  Escr\u00edbenos .", 
            "title": "Frecuencia de publicaciones"
        }, 
        {
            "location": "/dev/releases/#proceso", 
            "text": "El proceso que se describe aqu\u00ed incluye \u00fanicamente un repositorio ( core   o   plugins   o   apps ). Para publicar todos los repositorioes habr\u00e1 que llevar este proceso en paralelo para todos ellos.", 
            "title": "Proceso"
        }, 
        {
            "location": "/dev/releases/#acordar-una-version-y-una-fecha", 
            "text": "A trav\u00e9s de la  lista de correo  se acuerda la siguiente versi\u00f3n que se va a publicar y una fecha aproximada de cu\u00e1ndo va a ocurrir.  Para decidir qu\u00e9 versi\u00f3n publicar se puede revisar el  changelog  donde se incluyen los cambios que se han ido a\u00f1adiendo a cada una de las versiones sin publicar.", 
            "title": "Acordar una versi\u00f3n y una fecha"
        }, 
        {
            "location": "/dev/releases/#preparar-milestone-en-el-repositorio", 
            "text": "Las versiones se gestionan a traves de milestones en el repositorio de Github. Una vez se ha acordado por la lista de correo, habr\u00e1 que crear una milestone con la versi\u00f3n y la fecha acordadas.", 
            "title": "Preparar milestone en el repositorio"
        }, 
        {
            "location": "/dev/releases/#preparar-la-rama-de-release", 
            "text": "Una vez se ha decidido la versi\u00f3n, hay que preparar la rama en el repositorio. Lo hacemos de una manera similar a  GeoServer .  \u00danicamente debemos buscar la rama que se corresponde a la versi\u00f3n que queremos publicar. Por ejemplo, si queremos publicar la versi\u00f3n  7.1.0  deberemos buscar la rama que tenga la versi\u00f3n  7.1.0-SNAPSHOT  en el fichero  pom.xml . Esta rama \u00fanicamente puede ser  master  o  7.1.x .  En caso de que la rama con la versi\u00f3n a publicar sea  master  deberemos crear la rama  7.1.x :  git checkout master\ngit checkout -b  7 .1.x\ngit push -u origin  7 .1.x  y dejar la rama  master  preparada para seguir desarrollando la  7.2.0-SNAPSHOT :  git checkout master\nmvn versions:set -DnewVersion = 7 .2.0-SNAPSHOT\nyarn version --no-git-tag-version --new-version  7 .2.0-SNAPSHOT\nrm  ` git status  |  grep pom.xml.versionsBackup ` \ngit add .\ngit commit -m  Bump version to 7.2.0-SNAPSHOT \ngit push", 
            "title": "Preparar la rama de release"
        }, 
        {
            "location": "/dev/releases/#preparar-la-rama-de-documentacion", 
            "text": "Para tener documentaci\u00f3n de todas las versiones utilizamos ramas y tags como un repositorio de desarrollo que luego publicaremos en  ReadTheDocs .  El proceso es id\u00e9ntico al de la  rama de release  pero sin necesidad de actualizar versiones. Si hemos tenido que crear la rama de release a partir de  master  para el desarrollo, lo haremos aqu\u00ed tambi\u00e9n:  git checkout master\ngit checkout -b  7 .1.x\ngit push -u origin  7 .1.x", 
            "title": "Preparar la rama de documentaci\u00f3n"
        }, 
        {
            "location": "/dev/releases/#correcciones-de-ultima-hora", 
            "text": "Una vez las ramas est\u00e1n listas para el despliegue se probar\u00e1 todo bien y se har\u00e1n cambios de \u00faltima hora.  Los \u00fanicos cambios que se pueden introducir son correcciones de errores.  Todos los cambios que afecten a la publicaci\u00f3n de la versi\u00f3n deber\u00e1n tener asociada una issue en GitHub. La issue deber\u00e1 pertenecer siempre a la milestone de la versi\u00f3n.  Todos los cambios hay que documentarlos inmediatamente en el changelog.", 
            "title": "Correcciones de \u00faltima hora"
        }, 
        {
            "location": "/dev/releases/#desplegar", 
            "text": "Cuando el software est\u00e9 listo para el despliegue, en primer lugar actualizaremos las dependencias entre proyectos para Maven ( pom.xml ) y npm ( package.json ). Por ejemplo, si estamos desplegando la versi\u00f3n  7.1.0 , en el  pom.xml  y  package.json  de nuestros plugins deberemos sustituir las versiones de desarrollo ( 7.1.0-SNAPSHOT / 7.1.0-alpha.x ) por la versi\u00f3n final ( 7.1.0 ).  En caso de actualizar alg\u00fan fichero  package.json  hay que recordar volver a ejecutar  yarn  para actualizar el fichero  yarn.lock  y subirlo al repositorio tambi\u00e9n.  Una vez todas las versiones est\u00e1n listas, actualizaremos la rama de release con la versi\u00f3n definitiva y la publicaremos:  # Bump \ngit checkout  7 .1.x\nmvn versions:set -DnewVersion = 7 .1.0\nyarn version --no-git-tag-version --new-version  7 .1.0\nrm  ` git status  |  grep pom.xml.versionsBackup `  # Commit \ngit add .\ngit commit -m  Bump version to 7.1.0  # Push \ngit tag v7.1.0\ngit push\ngit push --tags  En el caso de repositorios con m\u00faltiples suproyectos, adem\u00e1s deberemos cambiar la versi\u00f3n en todos los subdirectorios:  for  i in  ` ls */package.json ` ;   do \n   pushd   ` dirname  $i ` ; \n  yarn version --no-git-tag-version --new-version  7 .1.0 ; \n  popd ;  done   El despliegue de los artefactos Java se deber\u00eda realizar autom\u00e1ticamente con Travis. Deberemos esperar a que Travis env\u00ede el correo de notificaci\u00f3n de \u00e9xito y luego comprobar que los artefactos se han publicado correctamente en  Maven  (la publicaci\u00f3n de artefactos en el repositorio central de Maven puede tardar hasta 10 minutos).  Sin embargo, la publicaci\u00f3n de paquetes JavaScript ha de ser manual. Para ello, deberemos ejecutar la siguiente instrucci\u00f3n:  yarn publish --no-git-tag-version --access public --new-version  7 .1.0  o, para repositorios con m\u00faltiples proyectos:  for  i in  ` ls */package.json ` ;   do \n   pushd   ` dirname  $i ` ; \n  yarn publish --no-git-tag-version --access public --new-version  7 .1.0 ; \n  popd ;  done   Despu\u00e9s comprobaremos que los paquetes se han subido correctamente a  npmjs .  Para terminar, dejaremos la rama de release preparada con la siguiente versi\u00f3n (patch version++):  mvn versions:set -DnewVersion = 7 .1.1-SNAPSHOT\nyarn version --no-git-tag-version --new-version  7 .1.1-SNAPSHOT\nrm  ` git status  |  grep pom.xml.versionsBackup ` \ngit add .\ngit commit -m  Bump version to 7.1.1-SNAPSHOT \ngit push  y, para repositorios con subdirectorios:  for  i in  ` ls */package.json ` ;   do \n   pushd   ` dirname  $i ` ; \n  yarn version --no-git-tag-version --new-version  7 .1.1-SNAPSHOT ; \n  popd ;  done", 
            "title": "Desplegar"
        }, 
        {
            "location": "/dev/releases/#actualizar-documentacion", 
            "text": "Una vez la versi\u00f3n est\u00e1 publicada, deberemos actualizar la documentaci\u00f3n. Las tareas a realizar son:    Actualizar el changelog con las nuevas versiones, incluyendo fecha de publicaci\u00f3n.    Actualizar los enlaces (la  gu\u00eda r\u00e1pida , la  secci\u00f3n de descargas ).    Crear un tag en el repositorio de documentaci\u00f3n:    git checkout  7 .1.x\ngit tag v7.1.0\ngit push --tags    A\u00f1adir una versi\u00f3n en ReadTheDocs con el nuevo tag.    Mezclar cambios de la documentaci\u00f3n en  master  (al menos el changelog).", 
            "title": "Actualizar documentaci\u00f3n"
        }, 
        {
            "location": "/dev/releases/#enviar-mensaje-a-la-lista-de-correo", 
            "text": "Por \u00faltimo, es necesario enviar un correo a la lista. Se puede utilizar la siguiente plantilla:  Asunto : Nueva versi\u00f3n  versi\u00f3n  Mensaje :  Hola a todos,  Acabamos de publicar una nueva versi\u00f3n de Geoladris, la versi\u00f3n  versi\u00f3n .  Pod\u00e9is encontrar los cambios que trae esta nueva versi\u00f3n en https://geoladris.github.io/doc/ref/changelog/.  La documentaci\u00f3n general la encontrar\u00e9is en https://geoladris.github.io/doc/.  Y la documentaci\u00f3n sobre versiones anteriores est\u00e1 disponible en ReadTheDocs: https://readthedocs.org/projects/geoladris/.  Saludos.", 
            "title": "Enviar mensaje a la lista de correo"
        }, 
        {
            "location": "/dev/contribute/", 
            "text": "Geoladris existe debido a los esfuerzos de personas como t\u00fa.\n\n\nHay muchas maneras en las que puedes ayudar con el proyecto Geoladris. Geoladris abarca completamente un modelo de desarrollo de c\u00f3digo abierto en la que cualquiera puede participar mediante aportaciones de c\u00f3digo, detecci\u00f3n de errores, traducci\u00f3n, documentaci\u00f3n o lo que se te ocurra.\n\n\nLista de correo\n\n\n\n\nDesarrollo\n\n\n\n\nErrores y sugerencias\n\n\nPara reportar errores o sugerir funcionalidad nueva en Geoladris puedes gastar los issue trackers de GitHub: \ncore\n y \nplugins\n. Si no tienes claro si pertenece al \ncore\n o a los \nplugins\n, utiliza el de \nplugins\n.\n\n\nEn nuestros trackers gastamos unas \netiquetas\n espec\u00edficas (basadas en la idea de Dave Lunny: \nSane GitHub Labels\n) para saber el estado, el tipo y la prioridad de la issue. Cuando a\u00f1adas una nueva issue s\u00f3lo tienes que incluir una etiqueta \nType: \ntipo\n. Del resto nos encargaremos nosotros.\n\n\nPuedes ver el estado de todas las issues con \nwaffle\n.\n\n\nFormateo del c\u00f3digo\n\n\nSe utiliza el \nestilo\n de Google para formatear el c\u00f3digo Java.\n\n\nPara el c\u00f3digo JavaScript se utilizan unas reglas basadas en Airbnb (\nES5\n) con ligeras modificaciones. Es posible encontrar los ficheros \n.eslintrc\n en el repositorio con las definiciones para ejecutar con \neslint\n.\n\n\nContribuir cambios\n\n\nPara incluir correcciones o nuevas funcionalidades, en Geoladris utilizamos \npull requests\n.\n\n\nSoporte\n\n\nGeoladris es software libre, t\u00fa puedes hacer uso de las \ncuatro libertades del software libre\n pero si quieres o necesitas soporte comercial, las organizaciones que se detallan a continuaci\u00f3n han participado activamente en el desarrollo de Geoladris.\n\n\n\n\n\n\n\u00c1nimo, haz que tu organizaci\u00f3n tambi\u00e9n sea part\u00edcipe.", 
            "title": "Contribuir"
        }, 
        {
            "location": "/dev/contribute/#lista-de-correo", 
            "text": "Desarrollo", 
            "title": "Lista de correo"
        }, 
        {
            "location": "/dev/contribute/#errores-y-sugerencias", 
            "text": "Para reportar errores o sugerir funcionalidad nueva en Geoladris puedes gastar los issue trackers de GitHub:  core  y  plugins . Si no tienes claro si pertenece al  core  o a los  plugins , utiliza el de  plugins .  En nuestros trackers gastamos unas  etiquetas  espec\u00edficas (basadas en la idea de Dave Lunny:  Sane GitHub Labels ) para saber el estado, el tipo y la prioridad de la issue. Cuando a\u00f1adas una nueva issue s\u00f3lo tienes que incluir una etiqueta  Type:  tipo . Del resto nos encargaremos nosotros.  Puedes ver el estado de todas las issues con  waffle .", 
            "title": "Errores y sugerencias"
        }, 
        {
            "location": "/dev/contribute/#formateo-del-codigo", 
            "text": "Se utiliza el  estilo  de Google para formatear el c\u00f3digo Java.  Para el c\u00f3digo JavaScript se utilizan unas reglas basadas en Airbnb ( ES5 ) con ligeras modificaciones. Es posible encontrar los ficheros  .eslintrc  en el repositorio con las definiciones para ejecutar con  eslint .", 
            "title": "Formateo del c\u00f3digo"
        }, 
        {
            "location": "/dev/contribute/#contribuir-cambios", 
            "text": "Para incluir correcciones o nuevas funcionalidades, en Geoladris utilizamos  pull requests .", 
            "title": "Contribuir cambios"
        }, 
        {
            "location": "/dev/contribute/#soporte", 
            "text": "Geoladris es software libre, t\u00fa puedes hacer uso de las  cuatro libertades del software libre  pero si quieres o necesitas soporte comercial, las organizaciones que se detallan a continuaci\u00f3n han participado activamente en el desarrollo de Geoladris.    \u00c1nimo, haz que tu organizaci\u00f3n tambi\u00e9n sea part\u00edcipe.", 
            "title": "Soporte"
        }, 
        {
            "location": "/ref/changelog/", 
            "text": "This project follows \nsemantic versioning\n.\n\n\nCore - 7.0.0 [20-02-2018]\n\n\nModificado\n\n\n\n\nEl proceso de empaquetado de aplicaciones ahora se gestiona con Maven y \nyarn\n conjuntamente (ver \naplicaciones\n).\n\n\nLas dependencias de los plugins cliente se gestionan ahora con \nyarn\n.\n\n\nEstructura de los plugins cliente (ver \nplugins\n).\n\n\nLos paquetes Java ahora se despliegan en el repo central de Maven.\n\n\nEl idioma se cambia con la ruta \n/setlang?\nidioma\n en lugar de con el par\u00e1metro \n?lang=\nidioma\n.\n\n\n\n\nEliminado\n\n\n\n\nVariable de entorno \nGEOLADRIS_MINIFIED\n. Los recursos en cliente se sirven minificados por defecto, con la posibilidad de servirlos sin minificar con el par\u00e1metro \ndebug=true\n.\n\n\n\n\nCorregido\n\n\n\n\nError al arrancar aplicaciones con Tomcat 8.0.x.\n\n\n\n\nPlugins - 7.0.0 [20-02-2018]\n\n\nA\u00f1adido\n\n\n\n\nPosibilidad de especificar API para Google Maps (\n#38\n).\n\n\n\n\nModificado\n\n\n\n\nEl nombre del recurso de base de datos en el fichero de Tomcat \ncontext.xml\n ahora debe ser \ngeoladris\n en lugar de \nunredd-portal\n.\n\n\nEl plugin \nol2Controls\n ahora se llama \nol2controls\n (sin may\u00fascula).\n\n\nLos paquetes Java ahora se despliegan en el repo central de Maven.\n\n\n\n\nCorregido\n\n\n\n\nCheckboxes de la lista de capas (\nlayer-list.js\n) no respond\u00edan.\n\n\nlegend-panel.js\n lanzaba excepciones.\n\n\nLa barra de desplazamiento de la lista de capas no funcionaba.\n\n\nMultiples correcciones de la interfaz de usuario (CSS).\n\n\nEl panel de transparencia mostraba capas que no estaban visibles.\n\n\nCorrecci\u00f3n de varios \nbugs\n en el plugin \nlayers-editor\n.\n\n\nEl plugin \nlanguage-buttons\n no cambiaba el idioma correctamente.\n\n\nEl plugin \ntour\n no incluye ninguna configuraci\u00f3n por defecto (ya que es espec\u00edfica de las aplicaciones).\n\n\nLos servicios de estad\u00edsticas no funcionaban en ciertos entornos con Tomcat (no ten\u00eda permisos para escribir el fichero de log).\n\n\n\n\nApps - 7.0.0 [20-02-2018]\n\n\nA\u00f1adido\n\n\n\n\nAplicaci\u00f3n \ndevelop\n, para facilitar el desarrollo.\n\n\nAplicaci\u00f3n \nessential\n, que incluye solo el n\u00facleo sin ning\u00fan plugin.\n\n\nDespliegue con Docker de la aplicaci\u00f3n \ndemo\n.\n\n\nPosibilidad de especificar la conexi\u00f3n a base de datos de las aplicaciones \ndemo\n y \ndevelop\n mediante variables de entorno (\nGEOLADRIS_DB_URL\n, \nGEOLADRIS_DB_USER\n, \nGEOLADRIS_DB_PASS\n) en lugar de editando el fichero \ncontext.xml\n.\n\n\n\n\nCorregido\n\n\n\n\nRedirecci\u00f3n en caso de no a\u00f1adir \n/\n al final de la URL en el navegador.\n\n\n\n\nCore - 6.0.1 [30-08-2017]\n\n\nCorregido\n\n\n\n\nError al arrancar aplicaciones con Tomcat 8.0.x.\n\n\n\n\nPlugins - 6.0.3 [30-08-2017]\n\n\nA\u00f1adido\n\n\n\n\nPosibilidad de especificar API para Google Maps (\n#38\n).\n\n\n\n\nCorregido\n\n\n\n\nCheckboxes de la lista de capas (\nlayer-list.js\n) no respond\u00edan.\n\n\nlegend-panel.js\n lanzaba excepciones .\n\n\n\n\nCore - 6.0.0 [2017-04-21]\n\n\nModificado\n\n\n\n\nLos plugins empaquetados como \n.jar\n pasan a estar contenidos en un subdirectorio dentro de \ngeoladris\n (en lugar de directamente en \ngeoladris\n). As\u00ed, todos los plugins est\u00e1n en subdirectorios, independientemente de su empaquetado (ver \ngu\u00eda de migraci\u00f3n\n).\n\n\nTodos los plugins toman su nombre del subdirectorio en el que est\u00e1n contenidos.\n\n\ninstallInRoot\n por defecto a \nfalse\n para todos los plugins, independientemente del empaquetado; \ncore\n se mantiene con \ninstallInRoot : true\n para que sus m\u00f3dulos se puedan referenciar de manera sencilla desde otros plugins.\n\n\nModuleConfigurationProvider\n a\u00f1adidos a una lista en \nServletContext\n en lugar de a un objeto \nConfig\n (ver \ngu\u00eda de migraci\u00f3n\n).\n\n\n\n\nCorregido\n\n\n\n\nMinificaci\u00f3n no funciona para plugins con \ninstallInRoot : false\n.\n\n\nPeticiones a recursos cualificados devuelven recursos sin cualificar (y viceversa)\n.\n\n\nNullPointerException\n cuando alg\u00fan \nModuleConfigurationProvider\n devuelve configuraci\u00f3n para un plugin no existente.\n\n\nBug con ficheros CSS llamados igual que el directorio que los contiene (\nstyles/styles.css\n, \nmodules/modules.css\n, \ntheme/theme.css\n) en plugins con \ninstallInRoot:false\n.\n\n\n\n\nA\u00f1adido\n\n\n\n\nScript (\ngeoladris_build.sh\n) para generar paquetes \n.war\n a partir de un descriptor \nbuild.json\n y un directorio de configuraci\u00f3n.\n\n\nPosibilidad de obtener la configuraci\u00f3n desde una base de datos, tanto configuraci\u00f3n de plugins (\npublic-conf.json\n) como propiedades (\nportal.properties\n) y mensajes (\nmessages/messages*.properties\n).\n\n\nPosibilidad de a\u00f1adir m\u00f3dulos en subdirectorios\n.\n\n\nDetectar cambios en los directorios de plugins\n.\n\n\nFichero descriptor de plugin (\nplugin\n-conf.json\n) opcional\n.\n\n\nVariable \nGEOLADRIS_CACHE_TIMEOUT\n (en segundos) para limpiar la cach\u00e9 de configuraci\u00f3n. \u00danicamente se tiene en cuenta si la variable \nGEOLADRIS_CONFIG_CACHE\n es \ntrue\n.\n\n\nM\u00e9todo \nPortalRequestConfiguration.getCurrentConfiguration()\n para poder modificar desde un \nModuleConfigurationProvider\n la configuraci\u00f3n en construcci\u00f3n, obtenida de los \nModuleConfigurationProvider\n previos.\n\n\n\n\nCore - 5.0.1 [2016-12-06]\n\n\nCorregido\n\n\n\n\nDevolver \nContent-type\n correcto para im\u00e1genes SVG\n.\n\n\n\n\nCore - 5.0.0 [2016-11-25]\n\n\nCorregido\n\n\n\n\nEspecificar \narrays\n JSON como configuraci\u00f3n de los m\u00f3dulos\n.\n\n\nSoporte para Java 8\n.\n\n\nEnviar al cliente \u00fanicamente las propiedades bien conocidas\n.\n\n\nPosibilidad de tener un directorio de configuraci\u00f3n distinto por aplicaci\u00f3n\n.\n\n\n\n\nA\u00f1adido\n\n\n\n\nNuevo descriptor de aplicaci\u00f3n \npublic-conf.json\n. Permite activar y desactivar plugins. Sustituye a \nplugin-conf.json\n, que se mantiene temporalmente por compatibilidad hacia atr\u00e1s.\n\n\nMezclar la configuraci\u00f3n por defecto de los plugins y no s\u00f3lo de sobreescribirla.\n\n\nEspecificar \nconfiguraci\u00f3n espec\u00edfica de usuario\n.\n\n\nA\u00f1adir plugins (s\u00f3lo parte cliente) en el directorio de configuraci\u00f3n.\n\n\nCualificar los m\u00f3dulos con el nombre del plugin al que pertenecen (\ninstallInRoot:false\n).\n\n\nDirectorio \ntheme\n en los plugins. Contiene ficheros CSS con el estilo de la aplicaci\u00f3n.\n\n\nPar\u00e1metro \ndebug\n que carga los m\u00f3dulos sin minificaci\u00f3n.\n\n\nEspecificar el t\u00edtulo del documento HTML en el fichero \nportal.properties\n.\n\n\n\n\nModificado\n\n\n\n\nEl soporte para el fichero \nlayers.json\n se ha movido al plugin \nbase\n.\n\n\nEl directorio \nnfms\n que contiene los recursos se ha renombrado a \ngeoladris\n.\n\n\n\n\nBugs conocidos\n\n\n\n\nMinificaci\u00f3n no funciona para plugins con installInRoot:false\n.\n\n\nEs posible cargar recursos instalados en la ra\u00edz como si pertenecieran a un plugin inexistente.\n.", 
            "title": "Registro de cambios"
        }, 
        {
            "location": "/ref/changelog/#core-700-20-02-2018", 
            "text": "", 
            "title": "Core - 7.0.0 [20-02-2018]"
        }, 
        {
            "location": "/ref/changelog/#modificado", 
            "text": "El proceso de empaquetado de aplicaciones ahora se gestiona con Maven y  yarn  conjuntamente (ver  aplicaciones ).  Las dependencias de los plugins cliente se gestionan ahora con  yarn .  Estructura de los plugins cliente (ver  plugins ).  Los paquetes Java ahora se despliegan en el repo central de Maven.  El idioma se cambia con la ruta  /setlang? idioma  en lugar de con el par\u00e1metro  ?lang= idioma .", 
            "title": "Modificado"
        }, 
        {
            "location": "/ref/changelog/#eliminado", 
            "text": "Variable de entorno  GEOLADRIS_MINIFIED . Los recursos en cliente se sirven minificados por defecto, con la posibilidad de servirlos sin minificar con el par\u00e1metro  debug=true .", 
            "title": "Eliminado"
        }, 
        {
            "location": "/ref/changelog/#corregido", 
            "text": "Error al arrancar aplicaciones con Tomcat 8.0.x.", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#plugins-700-20-02-2018", 
            "text": "", 
            "title": "Plugins - 7.0.0 [20-02-2018]"
        }, 
        {
            "location": "/ref/changelog/#anadido", 
            "text": "Posibilidad de especificar API para Google Maps ( #38 ).", 
            "title": "A\u00f1adido"
        }, 
        {
            "location": "/ref/changelog/#modificado_1", 
            "text": "El nombre del recurso de base de datos en el fichero de Tomcat  context.xml  ahora debe ser  geoladris  en lugar de  unredd-portal .  El plugin  ol2Controls  ahora se llama  ol2controls  (sin may\u00fascula).  Los paquetes Java ahora se despliegan en el repo central de Maven.", 
            "title": "Modificado"
        }, 
        {
            "location": "/ref/changelog/#corregido_1", 
            "text": "Checkboxes de la lista de capas ( layer-list.js ) no respond\u00edan.  legend-panel.js  lanzaba excepciones.  La barra de desplazamiento de la lista de capas no funcionaba.  Multiples correcciones de la interfaz de usuario (CSS).  El panel de transparencia mostraba capas que no estaban visibles.  Correcci\u00f3n de varios  bugs  en el plugin  layers-editor .  El plugin  language-buttons  no cambiaba el idioma correctamente.  El plugin  tour  no incluye ninguna configuraci\u00f3n por defecto (ya que es espec\u00edfica de las aplicaciones).  Los servicios de estad\u00edsticas no funcionaban en ciertos entornos con Tomcat (no ten\u00eda permisos para escribir el fichero de log).", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#apps-700-20-02-2018", 
            "text": "", 
            "title": "Apps - 7.0.0 [20-02-2018]"
        }, 
        {
            "location": "/ref/changelog/#anadido_1", 
            "text": "Aplicaci\u00f3n  develop , para facilitar el desarrollo.  Aplicaci\u00f3n  essential , que incluye solo el n\u00facleo sin ning\u00fan plugin.  Despliegue con Docker de la aplicaci\u00f3n  demo .  Posibilidad de especificar la conexi\u00f3n a base de datos de las aplicaciones  demo  y  develop  mediante variables de entorno ( GEOLADRIS_DB_URL ,  GEOLADRIS_DB_USER ,  GEOLADRIS_DB_PASS ) en lugar de editando el fichero  context.xml .", 
            "title": "A\u00f1adido"
        }, 
        {
            "location": "/ref/changelog/#corregido_2", 
            "text": "Redirecci\u00f3n en caso de no a\u00f1adir  /  al final de la URL en el navegador.", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#core-601-30-08-2017", 
            "text": "", 
            "title": "Core - 6.0.1 [30-08-2017]"
        }, 
        {
            "location": "/ref/changelog/#corregido_3", 
            "text": "Error al arrancar aplicaciones con Tomcat 8.0.x.", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#plugins-603-30-08-2017", 
            "text": "", 
            "title": "Plugins - 6.0.3 [30-08-2017]"
        }, 
        {
            "location": "/ref/changelog/#anadido_2", 
            "text": "Posibilidad de especificar API para Google Maps ( #38 ).", 
            "title": "A\u00f1adido"
        }, 
        {
            "location": "/ref/changelog/#corregido_4", 
            "text": "Checkboxes de la lista de capas ( layer-list.js ) no respond\u00edan.  legend-panel.js  lanzaba excepciones .", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#core-600-2017-04-21", 
            "text": "", 
            "title": "Core - 6.0.0 [2017-04-21]"
        }, 
        {
            "location": "/ref/changelog/#modificado_2", 
            "text": "Los plugins empaquetados como  .jar  pasan a estar contenidos en un subdirectorio dentro de  geoladris  (en lugar de directamente en  geoladris ). As\u00ed, todos los plugins est\u00e1n en subdirectorios, independientemente de su empaquetado (ver  gu\u00eda de migraci\u00f3n ).  Todos los plugins toman su nombre del subdirectorio en el que est\u00e1n contenidos.  installInRoot  por defecto a  false  para todos los plugins, independientemente del empaquetado;  core  se mantiene con  installInRoot : true  para que sus m\u00f3dulos se puedan referenciar de manera sencilla desde otros plugins.  ModuleConfigurationProvider  a\u00f1adidos a una lista en  ServletContext  en lugar de a un objeto  Config  (ver  gu\u00eda de migraci\u00f3n ).", 
            "title": "Modificado"
        }, 
        {
            "location": "/ref/changelog/#corregido_5", 
            "text": "Minificaci\u00f3n no funciona para plugins con  installInRoot : false .  Peticiones a recursos cualificados devuelven recursos sin cualificar (y viceversa) .  NullPointerException  cuando alg\u00fan  ModuleConfigurationProvider  devuelve configuraci\u00f3n para un plugin no existente.  Bug con ficheros CSS llamados igual que el directorio que los contiene ( styles/styles.css ,  modules/modules.css ,  theme/theme.css ) en plugins con  installInRoot:false .", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#anadido_3", 
            "text": "Script ( geoladris_build.sh ) para generar paquetes  .war  a partir de un descriptor  build.json  y un directorio de configuraci\u00f3n.  Posibilidad de obtener la configuraci\u00f3n desde una base de datos, tanto configuraci\u00f3n de plugins ( public-conf.json ) como propiedades ( portal.properties ) y mensajes ( messages/messages*.properties ).  Posibilidad de a\u00f1adir m\u00f3dulos en subdirectorios .  Detectar cambios en los directorios de plugins .  Fichero descriptor de plugin ( plugin -conf.json ) opcional .  Variable  GEOLADRIS_CACHE_TIMEOUT  (en segundos) para limpiar la cach\u00e9 de configuraci\u00f3n. \u00danicamente se tiene en cuenta si la variable  GEOLADRIS_CONFIG_CACHE  es  true .  M\u00e9todo  PortalRequestConfiguration.getCurrentConfiguration()  para poder modificar desde un  ModuleConfigurationProvider  la configuraci\u00f3n en construcci\u00f3n, obtenida de los  ModuleConfigurationProvider  previos.", 
            "title": "A\u00f1adido"
        }, 
        {
            "location": "/ref/changelog/#core-501-2016-12-06", 
            "text": "", 
            "title": "Core - 5.0.1 [2016-12-06]"
        }, 
        {
            "location": "/ref/changelog/#corregido_6", 
            "text": "Devolver  Content-type  correcto para im\u00e1genes SVG .", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#core-500-2016-11-25", 
            "text": "", 
            "title": "Core - 5.0.0 [2016-11-25]"
        }, 
        {
            "location": "/ref/changelog/#corregido_7", 
            "text": "Especificar  arrays  JSON como configuraci\u00f3n de los m\u00f3dulos .  Soporte para Java 8 .  Enviar al cliente \u00fanicamente las propiedades bien conocidas .  Posibilidad de tener un directorio de configuraci\u00f3n distinto por aplicaci\u00f3n .", 
            "title": "Corregido"
        }, 
        {
            "location": "/ref/changelog/#anadido_4", 
            "text": "Nuevo descriptor de aplicaci\u00f3n  public-conf.json . Permite activar y desactivar plugins. Sustituye a  plugin-conf.json , que se mantiene temporalmente por compatibilidad hacia atr\u00e1s.  Mezclar la configuraci\u00f3n por defecto de los plugins y no s\u00f3lo de sobreescribirla.  Especificar  configuraci\u00f3n espec\u00edfica de usuario .  A\u00f1adir plugins (s\u00f3lo parte cliente) en el directorio de configuraci\u00f3n.  Cualificar los m\u00f3dulos con el nombre del plugin al que pertenecen ( installInRoot:false ).  Directorio  theme  en los plugins. Contiene ficheros CSS con el estilo de la aplicaci\u00f3n.  Par\u00e1metro  debug  que carga los m\u00f3dulos sin minificaci\u00f3n.  Especificar el t\u00edtulo del documento HTML en el fichero  portal.properties .", 
            "title": "A\u00f1adido"
        }, 
        {
            "location": "/ref/changelog/#modificado_3", 
            "text": "El soporte para el fichero  layers.json  se ha movido al plugin  base .  El directorio  nfms  que contiene los recursos se ha renombrado a  geoladris .", 
            "title": "Modificado"
        }, 
        {
            "location": "/ref/changelog/#bugs-conocidos", 
            "text": "Minificaci\u00f3n no funciona para plugins con installInRoot:false .  Es posible cargar recursos instalados en la ra\u00edz como si pertenecieran a un plugin inexistente. .", 
            "title": "Bugs conocidos"
        }, 
        {
            "location": "/ref/plugins/", 
            "text": "IMPORTANTE\n: Esta documentaci\u00f3n est\u00e1 en construcci\u00f3n y puede estar desactualizada y/o incompleta.\n\n\nol2\n\n\nmap.js\n\n\nConfiguraci\u00f3n\n:\n\n\n\n\ngmaps_key\n: Clave de API de Google Maps.\n\n\nhtmlId\n: Identificador del elemento HTML donde colocar el mapa. Por defecto \nmap\n.\n\n\nnumZoomLevels\n: N\u00famero de niveles de zoom del mapa.\n\n\n\n\nTraducciones\n:\n\n\nEventos\n:\n\n\nlayers.json\n\n\nDefine la estructura de capas del proyecto. Consiste en un elemento JSON con cuatro propiedades:\n\n\n{\n\n    \ndefault-server\n \n:\n \nhttp://demo1.geo-solutions.it\n,\n\n    \nwmsLayers\n \n:\n \n[],\n\n    \nportalLayers\n \n:\n \n[],\n\n    \ngroups\n \n:\n \n[]\n\n\n}\n\n\n\n\n\n\n\n\n\n\ndefault-server\n define el servidor que se usar\u00e1 como base en caso de que la URL de las capas no incluyan servidor. Ver atributo \nbaseUrl\n m\u00e1s abajo.\n\n\n\n\n\n\nwmsLayers\n define las capas que tendr\u00e1 el mapa. El orden en el que estas capas aparecen en este array define el orden de las capas en el dibujado del mapa. Cada capa consistir\u00e1 en un elemento que puede ser de tres tipos. El tipo por defecto es WMS y tiene las siguientes propiedades:\n\n\n\n\nid\n: Identificador de la capa.\n\n\ntype\n: Tipo de la capa. Puede ser \nwms\n, \nosm\n (para Open Street Map) o \ngmaps\n (para Google Maps). Por defecto es \nwms\n.\n\n\nlegend\n: Nombre del fichero imagen con la leyenda de la capa. Estos ficheros se acceden en \nstatic/loc/{lang}/images\n. Tambi\u00e9n es posible poner la cadena de car\u00e1cteres \nauto\n y el portal intentar\u00e1 obtener la imagen autom\u00e1ticamente de GeoServer usando la petici\u00f3n \nGetLegendGraphic\n de WMS.\n\n\nsourceLink\n: URL del proveedor de los datos.\n\n\nsourceLabel\n: Texto con el que presentar el enlace especificado en \nsourceLink\n.\n\n\n\n\nEn funci\u00f3n del tipo de la capa se especificar\u00e1n adem\u00e1s otras propiedades. Para \nwms\n:\n\n\n\n\nbaseUrl\n: URL del servidor WMS que sirve la capa. Si se especifica una URL sin servidor, por ejemplo  \n/diss_geoserver/gwc/service/wms\n, se usar\u00e1 \ndefault-server\n.\n\n\nwmsName\n: Nombre de la capa en el servicio WMS.\n\n\nimageFormat\n: Formato de imagen a utilizar en las llamadas WMS.\n\n\nqueryType\n: Protocolo usado para la herramienta de informaci\u00f3n: \nwfs\n o \nwms\n. En caso de ser \nwfs\n los siguientes par\u00e1metros son obligatorios: \nqueryGeomFieldName\n, \nqueryFieldNames\n, \nqueryFieldAliases\n y \nqueryTimeField\n (en caso de ser una capa temporal). En caso de ser \nwms\n no hay ning\u00fan par\u00e1metro adicional obligatorio, por lo que una capa que quiera usar WMS para la herramienta de informaci\u00f3n puede configurarse s\u00f3lo con: \n\"queryType\": \"wms\"\n. El \u00fanico requisito para capas con \n\"queryType\": \"wms\"\n es que el servidor codifique en EPSG:4326 la geometr\u00eda de la respuesta al \nGetFeatureInfo\n; en caso contrario el objeto consultado no se podr\u00e1 localizar en el mapa mediante zoom y resaltado. Si la capa no tiene un par\u00e1metro \nqueryType\n la capa no ser\u00e1 consultable.\n\n\nqueryUrl\n: URL base a utilizar en la petici\u00f3n de informaci\u00f3n. Base del servidor WMS o WFS a utilizar (seg\u00fan \nqueryType\n). Si no se especifica se toma \nbaseUrl\n.\n\n\nqueryGeomFieldName\n: Obligatorio en el caso de \n\"queryType\": \"wfs\"\n. El nombre del campo geom\u00e9trico. T\u00edpicamente \ngeom\n, \nthe_geom\n, \ngeometry\n, etc.\n\n\nqueryFieldNames\n: Obligatorio en el caso de \n\"queryType\": \"wfs\"\n. Nombres de los campos que se quieren obtener en la petici\u00f3n de info.\n\n\nqueryFieldAliases\n: Obligatorio en el caso de especificar \nqueryFieldNames\n. Aliases de los campos especificados en \nqueryFieldNames\n.\n\n\nqueryTimeFieldName\n: Obligatorio en el caso de \n\"queryType\": \"wfs\"\n si la capa tiene varias instancias temporales. Sin uso en el caso de \n\"queryType\": \"wms\"\n.\n\n\nqueryHighlightBounds\n: S\u00f3lo para el caso \n\"queryType\": \"wms\"\n. Si se desea resaltar solo el rect\u00e1ngulo que encuadra la geometr\u00eda de los objetos consultados (\ntrue\n) o toda la geometr\u00eda (\nfalse\n). Por defecto es \nfalse\n. En los casos en los que la geometr\u00eda es muy grande puede ser conveniente ponerlo a \ntrue\n para que el proceso de resaltado sea m\u00e1s r\u00e1pido. Por ejemplo:\n{\n\n  \nwmsLayers\n \n:\n \n[{\n\n    \nid\n \n:\n \nprovinces\n,\n\n    \nbaseUrl\n \n:\n \nhttp://demo1.geo-solutions.it/diss_geoserver/wms\n,\n\n    \nwmsName\n \n:\n \nunredd:drc_provinces\n,\n\n    \nimageFormat\n \n:\n \nimage/png8\n,\n\n    \nvisible\n \n:\n \ntrue\n,\n\n    \nsourceLink\n \n:\n \nhttp://www.wri.org/publication/interactive-forest-atlas-democratic-republic-of-congo\n,\n\n    \nsourceLabel\n \n:\n \nWRI\n,\n\n    \nqueryable\n \n:\n \ntrue\n\n  \n}],\n\n  \n...\n\n\n}\n\n\n\n\n\n\n\n\n\n\nPara \nosm\n (Open Street Map):\n\n\n\n\nosmUrls\n: lista de las URLs de los tiles. Usando \n${x}\n, \n${y}\n y \n${z}\n como variables. Por ejemplo:\n{\n\n  \nwmsLayers\n \n:\n \n[{\n\n    \nid\n \n:\n \nopenstreetmap\n,\n\n    \ntype\n \n:\n \nosm\n,\n\n    \nosmUrls\n \n:\n \n[\n\n      \nhttp://a.tile.openstreetmap.org/${z}/${x}/${y}.png\n,\n\n      \nhttp://b.tile.openstreetmap.org/${z}/${x}/${y}.png\n,\n\n      \nhttp://c.tile.openstreetmap.org/${z}/${x}/${y}.png\n\n    \n]\n\n  \n}],\n\n  \n...\n\n\n}\n\n\n\n\n\n\n\n\n\n\nPara \ngmaps\n (Google Maps):\n\n\n\n\ngmaps-type\n: Tipo de capa Google: \nROADMAP\n, \nSATELLITE\n, \nHYBRID\n o \nTERRAIN\n. Por ejemplo:\n{\n\n  \nwmsLayers\n \n:\n \n[{\n\n    \nid\n \n:\n \ngoogle-maps\n,\n\n    \ntype\n \n:\n \ngmaps\n,\n\n    \ngmaps-type\n \n:\n \nSATELLITE\n\n  \n}],\n\n  \n...\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nportalLayers\n define las capas que aparecen visibles al usuario. Una \nportalLayer\n puede contener varias \nwmsLayers\n. Cada \nportalLayer\n puede contener los siguientes elementos:\n\n\n\n\nid\n: Identificador de la capa.\n\n\nlabel\n: Texto con el nombre de la capa a usar en el portal. Si se especifica entre ${ }, se intentar\u00e1 obtener la traducci\u00f3n de los ficheros \n.properties\n existentes en el directorio \nmessages\n del  directorio de configuraci\u00f3n del portal.\n\n\ninfoFile\n: Nombre del fichero HTML con informaci\u00f3n sobre la capa. El fichero se accede en  \nstatic/loc/{lang}/html\n. En la interfaz gr\u00e1fica se representa con un bot\u00f3n de informaci\u00f3n al lado del nombre de la capa.\n\n\ninfoLink\n: URL con la informaci\u00f3n sobre la capa. Igual que \ninfoFile\n pero especificando una ruta absoluta. \ninfoFile\n tiene preferencia sobre \ninfoLink\n, por lo que si se define el primero, \ninfoLink\n se ignorar\u00e1.\n\n\ninlineLegendUrl\n: URL con una imagen peque\u00f1a que situar al lado del nombre de la capa en el \u00e1rbol de capas. Tambi\u00e9n es posible poner la cadena de car\u00e1cteres \nauto\n y el portal intentar\u00e1 obtener la imagen autom\u00e1ticamente de GeoServer usando la petici\u00f3n \nGetLegendGraphic\n de WMS.\n\n\nactive\n: Si la capa est\u00e1 inicialmente visible o no.\n\n\nlayers\n: Array con los identificadores de las \nwmsLayers\n a las que se accede a trav\u00e9s de esta capa.\n\n\ntimeInstances\n: Instantes de tiempo en ISO8601 separados por comas.\n\n\ntimeStyles\n: Nombres de los estilos a utilizar para cada instancia temporal. Cada estilo se corresponde con aquella instancia temporal que ocupa la misma posici\u00f3n en la lista. Si no se especifica este par\u00e1metro se utilizar\u00e1 el estilo por defecto para todos los estilos.\n\n\ndate-format\n: Formato de la fecha para cada capa. Seg\u00fan la librer\u00eda \nMoment \nhttp://momentjs.com/docs/#/displaying\n_\n. Por ejempo: \nDD-MM-YYYY\n. Por defecto s\u00f3lo el a\u00f1o (\nYYYY\n).\n\n\n\n\nfeedback\n: En el caso de que la herramienta de feedback est\u00e9 instalada, si se quiere o no que la capa aparezca en dicha herramienta para permitir al usuario hacer comentarios sobre la capa.\n\n\nPor ejemplo:\n\n\n{\n\n  \nwmsLayers\n \n:\n \n[{\n\n    \nid\n \n:\n \nwms_provinces\n,\n\n    \nbaseUrl\n \n:\n \nhttp://demo1.geo-solutions.it/diss_geoserver/wms\n,\n\n    \nwmsName\n \n:\n \nunredd:drc_provinces\n,\n\n    \nimageFormat\n \n:\n \nimage/png8\n,\n\n    \nvisible\n \n:\n \ntrue\n,\n\n    \nsourceLink\n \n:\n \nhttp://www.wri.org/publication/interactive-forest-atlas-democratic-republic-of-congo\n,\n\n    \nsourceLabel\n \n:\n \nWRI\n,\n\n    \nqueryable\n \n:\n \ntrue\n\n  \n}],\n\n  \nportalLayers\n \n:\n \n[{\n\n    \nid\n \n:\n \nprovinces\n,\n\n    \nactive\n \n:\n \ntrue\n,\n\n    \ninfoFile\n \n:\n \nprovinces_def.html\n,\n\n    \nlabel\n \n:\n \n${provinces}\n,\n\n    \nlayers\n \n:\n \n[\n \nwms_provinces\n \n],\n\n    \ninlineLegendUrl\n \n:\n \nhttp://demo1.geo-solutions.it/diss_geoserver/wms?REQUEST=GetLegendGraphic\nVERSION=1.0.0\nFORMAT=image/png\nWIDTH=20\nHEIGHT=20\nLAYER=unredd:drc_provinces\nTRANSPARENT=true\n,\n\n    \ntimeInstances\n \n:\n \n2007-03-01T00:00,2008-05-11T00:00,2005-03-01T00:00\n,\n\n    \ntimeStyles\n \n:\n \nstyle2007,style2008,style2005\n,\n\n    \ndate-format\n \n:\n \nDD-MM-YYYY\n\n  \n}],\n\n  \n...\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroups\n define la estructura final de las capas en el \u00e1rbol de capas de la aplicaci\u00f3n. Cada elemento de \ngroups\n contiene:\n\n\n\n\nid\n: Identificador del grupo.\n\n\nlabel\n: Igual que en \nportalLayer\n\n\ninfoFile\n: Igual que en \nportalLayer\n\n\ninfoLink\n: Igual que en \nportalLayer\n\n\n\n\nitems\n. Array con los identificadores de otros grupos (con la misma estructura que este elemento; recursivo) o capas (\nportalLayer\n).\n\n\nPor ejemplo:\n\n\n{\n\n\nwmsLayers\n \n:\n \n[{\n\n    \nid\n \n:\n \nwms_provinces\n,\n\n    \nbaseUrl\n \n:\n \nhttp://demo1.geo-solutions.it/diss_geoserver/wms\n,\n\n    \nwmsName\n \n:\n \nunredd:drc_provinces\n,\n\n    \nimageFormat\n \n:\n \nimage/png8\n,\n\n    \nvisible\n \n:\n \ntrue\n,\n\n    \nsourceLink\n \n:\n \nhttp://www.wri.org/publication/interactive-forest-atlas-democratic-republic-of-congo\n,\n\n    \nsourceLabel\n \n:\n \nWRI\n,\n\n    \nqueryable\n \n:\n \ntrue\n,\n\n    \nwmsTime\n \n:\n \n2007-03-01T00:00,2008-05-11T00:00,2005-03-01T00:00\n\n  \n}],\n\n  \nportalLayers\n \n:\n \n[{\n\n    \nid\n \n:\n \nprovinces\n,\n\n    \nactive\n \n:\n \ntrue\n,\n\n    \ninfoFile\n \n:\n \nprovinces_def.html\n,\n\n    \nlabel\n \n:\n \n${provinces}\n,\n\n    \nlayers\n \n:\n \n[\n \nwms_provinces\n \n],\n\n    \ninlineLegendUrl\n \n:\n \nhttp://demo1.geo-solutions.it/diss_geoserver/wms?REQUEST=GetLegendGraphic\nVERSION=1.0.0\nFORMAT=image/png\nWIDTH=20\nHEIGHT=20\nLAYER=unredd:drc_provinces\nTRANSPARENT=true\n\n  \n}],\n\n  \ngroups\n \n:\n \n[{\n\n    \nid\n \n:\n \nbase\n,\n\n    \nlabel\n \n:\n \n${base_layers}\n,\n\n    \ninfoFile\n:\n \nbase_layers.html\n,\n\n    \nitems\n \n:\n \n[\nprovinces\n]\n\n  \n}]\n\n\n}", 
            "title": "Plugins"
        }, 
        {
            "location": "/ref/plugins/#ol2", 
            "text": "", 
            "title": "ol2"
        }, 
        {
            "location": "/ref/plugins/#mapjs", 
            "text": "Configuraci\u00f3n :   gmaps_key : Clave de API de Google Maps.  htmlId : Identificador del elemento HTML donde colocar el mapa. Por defecto  map .  numZoomLevels : N\u00famero de niveles de zoom del mapa.   Traducciones :  Eventos :", 
            "title": "map.js"
        }, 
        {
            "location": "/ref/plugins/#layersjson", 
            "text": "Define la estructura de capas del proyecto. Consiste en un elemento JSON con cuatro propiedades:  { \n     default-server   :   http://demo1.geo-solutions.it , \n     wmsLayers   :   [], \n     portalLayers   :   [], \n     groups   :   []  }     default-server  define el servidor que se usar\u00e1 como base en caso de que la URL de las capas no incluyan servidor. Ver atributo  baseUrl  m\u00e1s abajo.    wmsLayers  define las capas que tendr\u00e1 el mapa. El orden en el que estas capas aparecen en este array define el orden de las capas en el dibujado del mapa. Cada capa consistir\u00e1 en un elemento que puede ser de tres tipos. El tipo por defecto es WMS y tiene las siguientes propiedades:   id : Identificador de la capa.  type : Tipo de la capa. Puede ser  wms ,  osm  (para Open Street Map) o  gmaps  (para Google Maps). Por defecto es  wms .  legend : Nombre del fichero imagen con la leyenda de la capa. Estos ficheros se acceden en  static/loc/{lang}/images . Tambi\u00e9n es posible poner la cadena de car\u00e1cteres  auto  y el portal intentar\u00e1 obtener la imagen autom\u00e1ticamente de GeoServer usando la petici\u00f3n  GetLegendGraphic  de WMS.  sourceLink : URL del proveedor de los datos.  sourceLabel : Texto con el que presentar el enlace especificado en  sourceLink .   En funci\u00f3n del tipo de la capa se especificar\u00e1n adem\u00e1s otras propiedades. Para  wms :   baseUrl : URL del servidor WMS que sirve la capa. Si se especifica una URL sin servidor, por ejemplo   /diss_geoserver/gwc/service/wms , se usar\u00e1  default-server .  wmsName : Nombre de la capa en el servicio WMS.  imageFormat : Formato de imagen a utilizar en las llamadas WMS.  queryType : Protocolo usado para la herramienta de informaci\u00f3n:  wfs  o  wms . En caso de ser  wfs  los siguientes par\u00e1metros son obligatorios:  queryGeomFieldName ,  queryFieldNames ,  queryFieldAliases  y  queryTimeField  (en caso de ser una capa temporal). En caso de ser  wms  no hay ning\u00fan par\u00e1metro adicional obligatorio, por lo que una capa que quiera usar WMS para la herramienta de informaci\u00f3n puede configurarse s\u00f3lo con:  \"queryType\": \"wms\" . El \u00fanico requisito para capas con  \"queryType\": \"wms\"  es que el servidor codifique en EPSG:4326 la geometr\u00eda de la respuesta al  GetFeatureInfo ; en caso contrario el objeto consultado no se podr\u00e1 localizar en el mapa mediante zoom y resaltado. Si la capa no tiene un par\u00e1metro  queryType  la capa no ser\u00e1 consultable.  queryUrl : URL base a utilizar en la petici\u00f3n de informaci\u00f3n. Base del servidor WMS o WFS a utilizar (seg\u00fan  queryType ). Si no se especifica se toma  baseUrl .  queryGeomFieldName : Obligatorio en el caso de  \"queryType\": \"wfs\" . El nombre del campo geom\u00e9trico. T\u00edpicamente  geom ,  the_geom ,  geometry , etc.  queryFieldNames : Obligatorio en el caso de  \"queryType\": \"wfs\" . Nombres de los campos que se quieren obtener en la petici\u00f3n de info.  queryFieldAliases : Obligatorio en el caso de especificar  queryFieldNames . Aliases de los campos especificados en  queryFieldNames .  queryTimeFieldName : Obligatorio en el caso de  \"queryType\": \"wfs\"  si la capa tiene varias instancias temporales. Sin uso en el caso de  \"queryType\": \"wms\" .  queryHighlightBounds : S\u00f3lo para el caso  \"queryType\": \"wms\" . Si se desea resaltar solo el rect\u00e1ngulo que encuadra la geometr\u00eda de los objetos consultados ( true ) o toda la geometr\u00eda ( false ). Por defecto es  false . En los casos en los que la geometr\u00eda es muy grande puede ser conveniente ponerlo a  true  para que el proceso de resaltado sea m\u00e1s r\u00e1pido. Por ejemplo: { \n   wmsLayers   :   [{ \n     id   :   provinces , \n     baseUrl   :   http://demo1.geo-solutions.it/diss_geoserver/wms , \n     wmsName   :   unredd:drc_provinces , \n     imageFormat   :   image/png8 , \n     visible   :   true , \n     sourceLink   :   http://www.wri.org/publication/interactive-forest-atlas-democratic-republic-of-congo , \n     sourceLabel   :   WRI , \n     queryable   :   true \n   }], \n   ...  }     Para  osm  (Open Street Map):   osmUrls : lista de las URLs de los tiles. Usando  ${x} ,  ${y}  y  ${z}  como variables. Por ejemplo: { \n   wmsLayers   :   [{ \n     id   :   openstreetmap , \n     type   :   osm , \n     osmUrls   :   [ \n       http://a.tile.openstreetmap.org/${z}/${x}/${y}.png , \n       http://b.tile.openstreetmap.org/${z}/${x}/${y}.png , \n       http://c.tile.openstreetmap.org/${z}/${x}/${y}.png \n     ] \n   }], \n   ...  }     Para  gmaps  (Google Maps):   gmaps-type : Tipo de capa Google:  ROADMAP ,  SATELLITE ,  HYBRID  o  TERRAIN . Por ejemplo: { \n   wmsLayers   :   [{ \n     id   :   google-maps , \n     type   :   gmaps , \n     gmaps-type   :   SATELLITE \n   }], \n   ...  }       portalLayers  define las capas que aparecen visibles al usuario. Una  portalLayer  puede contener varias  wmsLayers . Cada  portalLayer  puede contener los siguientes elementos:   id : Identificador de la capa.  label : Texto con el nombre de la capa a usar en el portal. Si se especifica entre ${ }, se intentar\u00e1 obtener la traducci\u00f3n de los ficheros  .properties  existentes en el directorio  messages  del  directorio de configuraci\u00f3n del portal.  infoFile : Nombre del fichero HTML con informaci\u00f3n sobre la capa. El fichero se accede en   static/loc/{lang}/html . En la interfaz gr\u00e1fica se representa con un bot\u00f3n de informaci\u00f3n al lado del nombre de la capa.  infoLink : URL con la informaci\u00f3n sobre la capa. Igual que  infoFile  pero especificando una ruta absoluta.  infoFile  tiene preferencia sobre  infoLink , por lo que si se define el primero,  infoLink  se ignorar\u00e1.  inlineLegendUrl : URL con una imagen peque\u00f1a que situar al lado del nombre de la capa en el \u00e1rbol de capas. Tambi\u00e9n es posible poner la cadena de car\u00e1cteres  auto  y el portal intentar\u00e1 obtener la imagen autom\u00e1ticamente de GeoServer usando la petici\u00f3n  GetLegendGraphic  de WMS.  active : Si la capa est\u00e1 inicialmente visible o no.  layers : Array con los identificadores de las  wmsLayers  a las que se accede a trav\u00e9s de esta capa.  timeInstances : Instantes de tiempo en ISO8601 separados por comas.  timeStyles : Nombres de los estilos a utilizar para cada instancia temporal. Cada estilo se corresponde con aquella instancia temporal que ocupa la misma posici\u00f3n en la lista. Si no se especifica este par\u00e1metro se utilizar\u00e1 el estilo por defecto para todos los estilos.  date-format : Formato de la fecha para cada capa. Seg\u00fan la librer\u00eda  Moment  http://momentjs.com/docs/#/displaying _ . Por ejempo:  DD-MM-YYYY . Por defecto s\u00f3lo el a\u00f1o ( YYYY ).   feedback : En el caso de que la herramienta de feedback est\u00e9 instalada, si se quiere o no que la capa aparezca en dicha herramienta para permitir al usuario hacer comentarios sobre la capa.  Por ejemplo:  { \n   wmsLayers   :   [{ \n     id   :   wms_provinces , \n     baseUrl   :   http://demo1.geo-solutions.it/diss_geoserver/wms , \n     wmsName   :   unredd:drc_provinces , \n     imageFormat   :   image/png8 , \n     visible   :   true , \n     sourceLink   :   http://www.wri.org/publication/interactive-forest-atlas-democratic-republic-of-congo , \n     sourceLabel   :   WRI , \n     queryable   :   true \n   }], \n   portalLayers   :   [{ \n     id   :   provinces , \n     active   :   true , \n     infoFile   :   provinces_def.html , \n     label   :   ${provinces} , \n     layers   :   [   wms_provinces   ], \n     inlineLegendUrl   :   http://demo1.geo-solutions.it/diss_geoserver/wms?REQUEST=GetLegendGraphic VERSION=1.0.0 FORMAT=image/png WIDTH=20 HEIGHT=20 LAYER=unredd:drc_provinces TRANSPARENT=true , \n     timeInstances   :   2007-03-01T00:00,2008-05-11T00:00,2005-03-01T00:00 , \n     timeStyles   :   style2007,style2008,style2005 , \n     date-format   :   DD-MM-YYYY \n   }], \n   ...  }       groups  define la estructura final de las capas en el \u00e1rbol de capas de la aplicaci\u00f3n. Cada elemento de  groups  contiene:   id : Identificador del grupo.  label : Igual que en  portalLayer  infoFile : Igual que en  portalLayer  infoLink : Igual que en  portalLayer   items . Array con los identificadores de otros grupos (con la misma estructura que este elemento; recursivo) o capas ( portalLayer ).  Por ejemplo:  {  wmsLayers   :   [{ \n     id   :   wms_provinces , \n     baseUrl   :   http://demo1.geo-solutions.it/diss_geoserver/wms , \n     wmsName   :   unredd:drc_provinces , \n     imageFormat   :   image/png8 , \n     visible   :   true , \n     sourceLink   :   http://www.wri.org/publication/interactive-forest-atlas-democratic-republic-of-congo , \n     sourceLabel   :   WRI , \n     queryable   :   true , \n     wmsTime   :   2007-03-01T00:00,2008-05-11T00:00,2005-03-01T00:00 \n   }], \n   portalLayers   :   [{ \n     id   :   provinces , \n     active   :   true , \n     infoFile   :   provinces_def.html , \n     label   :   ${provinces} , \n     layers   :   [   wms_provinces   ], \n     inlineLegendUrl   :   http://demo1.geo-solutions.it/diss_geoserver/wms?REQUEST=GetLegendGraphic VERSION=1.0.0 FORMAT=image/png WIDTH=20 HEIGHT=20 LAYER=unredd:drc_provinces TRANSPARENT=true \n   }], \n   groups   :   [{ \n     id   :   base , \n     label   :   ${base_layers} , \n     infoFile :   base_layers.html , \n     items   :   [ provinces ] \n   }]  }", 
            "title": "layers.json"
        }, 
        {
            "location": "/ref/events/", 
            "text": "IMPORTANTE\n: Esta documentaci\u00f3n est\u00e1 en construcci\u00f3n y puede estar desactualizada y/o incompleta.\n\n\nGenerales\n\n\najax\n\n\nEscuchado por el m\u00f3dulo \ncommunication\n para realizar llamadas a servicios.\n\n\nPar\u00e1metros\n: Un objeto con las siguientes propiedades:\n\n\n\n\nurl\n: URL a la que se quiere pedir la informaci\u00f3n.\n\n\nsuccess\n: funci\u00f3n a ejecutar cuando el servidor responda satisfactoriamente.\n\n\ncomplete\n: funci\u00f3n a ejecutar cuando el servidor responda, sea satisfactoriamente o tras un error.\n\n\nerrorMsg\n: Mensaje de error.\n\n\nerror\n: funci\u00f3n a ejecutar cuando el servidor responda con un error. Por defecto se generar\u00e1 un mensaje de error con el contenido de errorMsg.\n\n\ncontrolCallBack\n: funci\u00f3n que recibe el objeto XMLHttpRequest que representa la petici\u00f3n. Este objeto tiene m\u00e9todos como \nabort()\n que permiten la cancelaci\u00f3n de la petici\u00f3n.\n\n\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\najax\n,\n \n{\n\n    \ntype\n:\n \nPOST\n,\n\n    \nurl\n:\n \npost-url\n,\n\n    \ndata\n:\n \ndata\n,\n\n    \nsuccess\n:\n \nfunction\n()\n \n{\n\n        \nbus\n.\nsend\n(\nui-hide\n,\n \ndialogId\n);\n\n    \n},\n\n    \nerrorMsg\n:\n \ni18n\n[\najax_error\n],\n\n    \ncomplete\n:\n \nfunction\n()\n \n{\n\n        \nbus\n.\nsend\n(\nui-loading:end\n,\n \ni18n\n[\najax_wait\n]);\n\n    \n}\n\n\n});\n\n\n\n\n\n\nerror\n\n\nEscuchado por el m\u00f3dulo \nerror\n, que muestra un mensaje de error al usuario.\n\n\nParametros\n: Mensaje con el error a mostrar\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nerror\n,\n \nDirecci\u00f3n de e-mail incorrecta\n);\n\n\n\n\n\n\nmodules-loaded\n\n\nEnviado una vez el m\u00f3dulo \ncustomization\n ha cargado todos los m\u00f3dulos especificados por el servidor.\n\n\nPar\u00e1metros\n: Ninguno.\n\n\nshow-wait-mask\n\n\nMuestra un indicador de que el sistema est\u00e1 ocupado y el usuario debe esperar\n\n\nPar\u00e1metros\n: Texto informativo.\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nshow-wait-mask\n,\n \nEnviando informaci\u00f3n al servidor...\n);\n\n\n\n\n\n\nhide-wait-mask\n\n\nOculta el indicador mostrado por \nshow-wait-mask\n.\n\n\nPar\u00e1metros\n: Ninguno\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nhide-wait-mask\n);\n\n\n\n\n\n\nshow-info\n\n\nMuestra una ventana emergente con determinada informaci\u00f3n que se pasa como par\u00e1metro.\n\n\nPar\u00e1metros\n:\n\n\n\n\ntitle\n: T\u00edtulo de la ventana.\n\n\nlink\n: Bien una url que apunta a la p\u00e1gina que se pretende mostrar, o un objeto jquery que ser\u00e1 mostrado en la ventana.\n\n\neventOptions\n: Opcional. Elemento con las opciones para la personalizaci\u00f3n de la ventana. Actualmente se utiliza FancyBox por lo que se puede a\u00f1adir cualquier opci\u00f3n v\u00e1lida de este framework.\n\n\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nshow-info\n,\n \n[\n \nMi info\n,\n \nhttp://ambiente.gob.am/portal/static/loc/es/html/doc.html\n \n]);\n\n\n\n\n\n\nCapas\n\n\nbefore-adding-layers\n\n\nEnviado justo antes de que se empiecen a lanzar los eventos add-group y add-layer. Da la oportunidad a otros m\u00f3dulos de realizar operaciones previas a la carga de las capas.\n\n\nPar\u00e1metros\n: Ninguno.\n\n\nlayers-loaded\n\n\nEnviado una vez el m\u00f3dulo \nlayers\n ha lanzado los eventos \nadd-layer\n y \nadd-group\n correspondientes a la configuraci\u00f3n de capas existente en el servidor.\n\n\nPar\u00e1metros\n: Ninguno\n\n\nreset-layers\n\n\nSe env\u00eda para resetear la configuraci\u00f3n de capas del portal.\n\n\nComo norma general, cualquier m\u00f3dulo que escuche los eventos \nadd-layer\n, \nadd-group\n o \nlayers-loaded\n tambi\u00e9n deber\u00e1 escuchar el evento \nreset-layers\n, y devolver el estado interno del m\u00f3dulo (y del DOM) al que ten\u00eda justo antes de empezar a cargar grupos y capas.\n\n\nPar\u00e1metros\n: Ninguno\n\n\nadd-group\n\n\nIndica que se debe a\u00f1adir un grupo al \u00e1rbol de capas.\n\n\nPar\u00e1metros\n: Un objeto con las siguientes propiedades:\n\n\n\n\nid\n: identificador del grupo\n\n\nparentId\n: Opcional, para grupos dentro de otros grupos hace referencia al grupo contenedor\n\n\nname\n: nombre del grupo\n\n\ninfoLink\n: Ruta de la p\u00e1gina HTML con informaci\u00f3n sobre el grupo\n\n\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nadd-group\n,\n \n[\n \n{\n\n    \nid\n:\ngrupo_admin\n,\n\n    \nname\n:\nL\u00edmites administrativos\n\n\n}]);\n\n\n\n\n\n\nadd-layer\n\n\nIndica que se debe a\u00f1adir una capa a la aplicaci\u00f3n.\n\n\nPar\u00e1metros\n: Un objeto con las siguientes propiedades:\n\n\n\n\nid\n: id de la capa\n\n\ngroupId\n: id del grupo en el que se debe a\u00f1adir la capa\n\n\nlabel\n: Texto con el nombre de la capa a usar en el portal\n\n\ninfoLink\n: Ruta de la p\u00e1gina HTML con informaci\u00f3n sobre la capa\n\n\ninlineLegendUrl\n: URL con una imagen peque\u00f1a que situar al lado del nombre de la capa en el \u00e1rbol de capas\n\n\nqueryable\n: Si se pretende ofrecer herramienta de informaci\u00f3n para la capa o no\n\n\nactive\n: Si la capa est\u00e1 inicialmente visible o no\n\n\n\n\nwmsLayers\n: Array con la informaci\u00f3n de las distintas capas WMS que se acceder\u00e1n desde esta capa. El caso m\u00e1s habitual es que se acceda s\u00f3lo a una, pero es posible configurar varias. Los objetos de este array tienen la siguiente estructura:\n\n\n\n\nbaseUrl\n: URL del servidor WMS que sirve la capa\n\n\nwmsName\n: Nombre de la capa en el servicio WMS\n\n\nimageFormat\n: Formato de imagen a utilizar en las llamadas WMS\n\n\nzIndex\n: Posici\u00f3n en la pila de dibujado\n\n\nlegend\n: Nombre del fichero imagen con la leyenda de la capa. Estos ficheros se acceden en static/loc/{lang}/images\n\n\nlabel\n: T\u00edtulo de la leyenda\n\n\nsourceLink\n: URL del proveedor de los datos\n\n\nsourceLabel\n: Texto con el que presentar el enlace especificado en sourceLink\n\n\ntimestamps\n: Array con los instantes de tiempo en ISO8601 para los que la capa tiene informaci\u00f3n\n\n\n\n\n\n\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nadd-layer\n,\n \n{\n\n    \nid\n \n:\n \nmeteo-eeuu\n,\n\n    \ngroupId\n \n:\n \nlandcover\n,\n\n    \nlabel\n \n:\n \nRadar EEUU\n,\n\n    \nactive\n \n:\n \ntrue\n,\n\n    \nwmsLayers\n \n:\n \n[\n \n{\n\n        \nbaseUrl\n \n:\n \nhttp://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r-t.cgi\n,\n\n        \nwmsName\n \n:\n \nnexrad-n0r-wmst\n\n    \n}\n \n]\n\n\n});\n\n\n\n\n\n\nlayer-visibility\n\n\nCambia la visibilidad de una capa.\n\n\nPar\u00e1metros\n:\n\n\n\n\nid de la capa portal.\n\n\nvalor de visibilidad.\n\n\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nlayer-visibility\n,\n \n[\nprovincias\n,\n \nfalse\n]);\n\n\n\n\n\n\nshow-layer-info\n\n\nMuestra la informaci\u00f3n asociada a una capa con su atributo \ninfoLink\n o \ninfoFile\n.\n\n\nPar\u00e1metros\n: identificador de la capa.\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nshow-layer-info\n,\n \n[\n \nprovincias\n \n]);\n\n\n\n\n\n\nshow-group-info\n\n\nMuestra la informaci\u00f3n asociada a un grupo con su atributo \ninfoLink\n o \ninfoFile\n.\n\n\nPar\u00e1metros\n: identificador del grupo.\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nshow-group-info\n,\n \n[\n \nbase\n \n]);\n\n\n\n\n\n\ntime-slider.selection\n\n\nLanzado cuando el usuario selecciona un instante temporal global distinto al actual. Generalmente se actualiza el mapa con la informaci\u00f3n de esa fecha.\n\n\nPar\u00e1metros\n: objeto \nDate\n con el instante temporal seleccionado.\n\n\nEjemplo de uso\n:\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n();\n\n\nbus\n.\nsend\n(\ntime-slider.selection\n,\n \nd\n);\n\n\n\n\n\n\nlayer-time-slider.selection\n\n\nLanzado cuando el usuario selecciona un instante temporal espec\u00edfico para una capa (a diferencia del \ntime-slider.selection\n cuyo instante es global para todas las capas).\n\n\nPar\u00e1metros\n:\n\n\n\n\nid de la portalLayer que ha determinado su instante temporal.\n\n\nobjeto Date con el instante temporal seleccionado\n\n\n\n\nEjemplo de uso\n:\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n();\n\n\nbus\n.\nsend\n(\nlayer-time-slider.selection\n,\n \n[\nmi-portal-layer\n,\n \ndate\n]);\n\n\n\n\n\n\nlayer-timestamp-selected\n\n\nUna capa ha escuchado uno de los eventos de selecci\u00f3n temporal y ha determinado qu\u00e9 instancia temporal es la que m\u00e1s se ajusta a esa. La capa selecciona la \u00faltima instancia temporal que es menor o igual al instante seleccionado o la primera instancia si el instante seleccionado es anterior a todas sus instancias.\n\n\nPar\u00e1metros\n:\n\n\n\n\nid de la portalLayer que ha determinado su instante temporal.\n\n\nobjeto Date con el instante temporal seleccionado\n\n\ncadena de car\u00e1cteres con el nombre del estilo que se debe usar para esta instancia temporal. Puede ser nulo si la capa no requiere un estilo distinto por instante.\n\n\n\n\ntoggle-legend\n\n\nEscuchado por el m\u00f3dulo \nlegend-panel\n para mostrar u ocultar el panel con la leyenda.\n\n\nPar\u00e1metros\n: Ninguno\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\ntoggle-legend\n);\n\n\n\n\n\n\nregister-layer-action\n\n\nEscuchado por la lista de capas. Instala un bot\u00f3n a la derecha de las capas que realizar\u00e1 una acci\u00f3n al ser pulsado.\n\n\nPar\u00e1metros\n: Funci\u00f3n que devuelve el objeto jQuery que se mostar\u00e1 a modo de bot\u00f3n. Esta funci\u00f3n toma como par\u00e1metro el mismo objeto que se lanza en el evento \nadd-layer\n.\n\n\nEjemplo de uso (bot\u00f3n de informaci\u00f3n)\n:\n\n\nbus\n.\nlisten\n(\nbefore-adding-layers\n,\n \nfunction\n()\n \n{\n\n    \nvar\n \nshowInfoAction\n \n=\n \nfunction\n(\nportalLayer\n)\n \n{\n\n        \nif\n \n(\nportalLayer\n.\nhasOwnProperty\n(\ninfoFile\n))\n \n{\n\n            \naLink\n \n=\n \n$\n(\na/\n).\nattr\n(\nhref\n,\n \nportalLayer\n.\ninfoFile\n);\n\n            \naLink\n.\naddClass\n(\nlayer_info_button\n);\n\n            \naLink\n.\nfancybox\n({\n\n                \ncloseBtn\n \n:\n \ntrue\n,\n\n                \nopenEffect\n \n:\n \nelastic\n,\n\n                \ncloseEffect\n \n:\n \nelastic\n,\n\n                \ntype\n \n:\n \niframe\n,\n\n                \noverlayOpacity\n \n:\n \n0.5\n\n            \n});\n\n            \nreturn\n \naLink\n;\n\n        \n}\n \nelse\n \n{\n\n            \nreturn\n \nnull\n;\n\n        \n}\n\n    \n};\n\n    \nbus\n.\nsend\n(\nregister-layer-action\n,\n \nshowInfoAction\n);\n\n\n});\n\n\n\n\n\n\nregister-group-action\n\n\nIgual que \nregister-layer-action\n pero para grupos.\n\n\nshow-layer-panel\n\n\nActiva el panel de capas indicado.\n\n\nPar\u00e1metros\n: identificador del panel a activar. La lista de paneles puede variar en funci\u00f3n de los plugins que haya activados. La lista completa de ids es:\n\n\n\n\nall_layers_selector\n.\n\n\nlayers_transparency_selector\n\n\nlayer_slider_selector\n (s\u00f3lo con el plugin \nlayer-time-sliders\n).\n\n\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nshow-layer-panel\n,\n \n[\n \nlayers_transparency_selector\n \n]);\n\n\n\n\n\n\nMapa\n\n\nactivate-exclusive-control\n\n\nPide la activaci\u00f3n exclusiva del control que se pasa como par\u00e1metro y la desactivaci\u00f3n del control exclusivo que estuviera activado en el momento de lanzar el mensaje.\n\n\nPar\u00e1metros\n: Un objeto con las siguientes propiedades:\n\n\n\n\ncontrolIds\n: Array de identificadores de controles, creados con \nmap:createControl\n.\n\n\n\n\nEjemplo de uso\n:\n\n\ndefine\n([\n \nol2/controlRegistry\n \n],\n \nfunction\n(\ncontrolRegistry\n)\n \n{\n\n  \n...\n\n  \ncontrolRegistry\n.\nregisterControl\n(\nmeasure\n,\n \nfunction\n(\nmessage\n)\n \n{\n\n    \nreturn\n \nnew\n \nOpenLayers\n.\nControl\n.\nMeasure\n(\nOpenLayers\n.\nHandler\n.\nPath\n);\n\n  \n});\n\n  \nbus\n.\nsend\n(\nmap:createControl\n,\n \n{\n\n    \ncontrolId\n:\n \nmeasure\n,\n\n    \ncontrolType\n:\n \nmeasure\n\n  \n});\n\n  \nbus\n.\nsend\n(\nactivate-exclusive-control\n,\n \n{\n\n    \ncontrolIds\n:\n \n[\nmeasure\n]\n\n  \n});\n\n  \n...\n\n\n});\n\n\n\n\n\n\nzoom-in\n\n\nMueve la escala al nivel inmediatamente mayor.\n\n\nPar\u00e1metros\n: Ninguno\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nzoom-in\n);\n\n\n\n\n\n\nzoom-out\n\n\nMueve la escala al nivel inmediatamente menor\n\n\nPar\u00e1metros\n: Ninguno\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nzoom-out\n);\n\n\n\n\n\n\nzoom-to\n\n\nMueve el encuadre al objeto OpenLayers.Bounds que se pasa como par\u00e1metro. El objeto bounds debe estar en el sistema de referencia del mapa (EPSG:900913)\n\n\nPar\u00e1metros\n: OpenLayers.Bounds con el extent deseado.\n\n\nEjemplo de uso\n:\n\n\nvar\n \nbounds\n \n=\n \nnew\n \nOpenLayers\n.\nBounds\n();\n\n\nbounds\n.\nextend\n(\nnew\n \nOpenLayers\n.\nLonLat\n(\n0\n,\n42\n));\n\n\nbounds\n.\nextend\n(\nnew\n \nOpenLayers\n.\nLonLat\n(\n10\n,\n52\n));\n\n\n\nbounds\n.\ntransform\n(\n \nnew\n \nOpenLayers\n.\nProjection\n(\nEPSG:4326\n),\n \nnew\n \nOpenLayers\n.\nProjection\n(\nEPSG:900913\n));\n\n\n\nbus\n.\nsend\n(\nzoom-to\n,\n \nbounds\n);\n\n\n\n\n\n\ninitial-zoom\n\n\nSitua el mapa en la posici\u00f3n inicial\n\n\nPar\u00e1metros\n: Ninguno\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\ninitial-zoom\n);\n\n\n\n\n\n\nset-default-exclusive-control\n\n\nEstablece el control exclusivo por defecto para el mapa. S\u00f3lo un m\u00f3dulo exclusivo est\u00e1 activado en cada momento.\n\n\nPar\u00e1metros\n: Objeto OpenLayers.Control.\n\n\nEjemplo de uso\n:\n\n\nvar\n \ncontrol\n \n=\n \nnew\n \nOpenLayers\n.\nControl\n.\nWMSGetFeatureInfo\n({\n\n\n...\n\n\n});\n\n\nbus\n.\nsend\n(\nset-default-exclusive-control\n,\n \n[\ncontrol\n]);\n\n\n\n\n\n\nactivate-default-exclusive-control\n\n\nActivar el control establecido por defecto mediante el mensaje \nset-default-exclusive-control\n\n\nPar\u00e1metros\n: Ninguno.\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nactivate-default-exclusive-control\n);\n\n\n\n\n\n\ninfo-features\n\n\nResultados de la petici\u00f3n de informaci\u00f3n a una \u00fanica capa.\n\n\nPar\u00e1metros\n:\n\n\n\n\nwmsLayerId\n: Id de la capa a la que pertenecen las features.\n\n\n\n\nfeatures\n: array con las features OpenLayers. Cada feature tiene:\n\n\n\n\n\n\nUna propiedad \naliases\n que es un array que contiene un objeto con propiedades \nname\n y \nalias\n para cada atributo de la feature. Por ejemplo:\n\n\n:::js\n[{\n  \"name\" : \"ident\",\n  \"alias\" : \"Id\"\n}, {\n  \"name\" : \"nprov\",\n  \"alias\" : \"Nombre\"\n}, {\n  \"name\" : \"pop96\",\n  \"alias\" : \"Poblaci\u00f3n (1996)\"\n}]\n\n\n\n\n\n\nUna propiedad \nbounds\n con el bounding box de la geometr\u00eda de la feature o null si el servidor no la devolvi\u00f3. Siempre en EPSG:900913.\n\n\n\n\nUna propiedad \nhighlightGeom\n con la geometr\u00eda de la feature o el bounding box (en caso de que as\u00ed se configure en el \nlayers.json\n) o \nnull\n si el servidor no devolvi\u00f3 datos geom\u00e9tricos. Siempre en EPSG:900913.\n\n\n\n\n\n\n\n\nx: Posici\u00f3n X en la que se hizo click para obtener la informaci\u00f3n\n\n\n\n\ny: Posici\u00f3n Y en la que se hizo click para obtener la informaci\u00f3n\n\n\n\n\nEjemplo de uso\n:\n\n\nhighlight-feature\n\n\nIndica que se debe resaltar la geometr\u00eda que se pasa como par\u00e1metro\n\n\nPar\u00e1metros\n: OpenLayers.Geometry\n\n\nclear-highlighted-features\n\n\nIndica que se deben de eliminar todos los resaltes establecidos mediante \nhighlight-feature\n.\n\n\nPar\u00e1metros\n: Ninguno.\n\n\nFeedback\n\n\nactivate-feedback\n\n\nActiva el modo feedback mostrando la ventana y seleccionando la herramienta para el dibujado del pol\u00edgono sobre el que se da el feedback.\n\n\nPar\u00e1metros\n: Ninguno.\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\nactivate-feedback\n);\n\n\n\n\n\n\ndeactivate-feedback\n\n\nDesactiva el modo feedback, ocultando la ventana y volviendo a la herramienta por defecto (navegaci\u00f3n).\n\n\nPar\u00e1metros\n: Ninguno.\n\n\nEjemplo de uso\n:\n\n\nbus\n.\nsend\n(\ndeactivate-feedback\n);", 
            "title": "Eventos"
        }, 
        {
            "location": "/ref/events/#generales", 
            "text": "", 
            "title": "Generales"
        }, 
        {
            "location": "/ref/events/#ajax", 
            "text": "Escuchado por el m\u00f3dulo  communication  para realizar llamadas a servicios.  Par\u00e1metros : Un objeto con las siguientes propiedades:   url : URL a la que se quiere pedir la informaci\u00f3n.  success : funci\u00f3n a ejecutar cuando el servidor responda satisfactoriamente.  complete : funci\u00f3n a ejecutar cuando el servidor responda, sea satisfactoriamente o tras un error.  errorMsg : Mensaje de error.  error : funci\u00f3n a ejecutar cuando el servidor responda con un error. Por defecto se generar\u00e1 un mensaje de error con el contenido de errorMsg.  controlCallBack : funci\u00f3n que recibe el objeto XMLHttpRequest que representa la petici\u00f3n. Este objeto tiene m\u00e9todos como  abort()  que permiten la cancelaci\u00f3n de la petici\u00f3n.   Ejemplo de uso :  bus . send ( ajax ,   { \n     type :   POST , \n     url :   post-url , \n     data :   data , \n     success :   function ()   { \n         bus . send ( ui-hide ,   dialogId ); \n     }, \n     errorMsg :   i18n [ ajax_error ], \n     complete :   function ()   { \n         bus . send ( ui-loading:end ,   i18n [ ajax_wait ]); \n     }  });", 
            "title": "ajax"
        }, 
        {
            "location": "/ref/events/#error", 
            "text": "Escuchado por el m\u00f3dulo  error , que muestra un mensaje de error al usuario.  Parametros : Mensaje con el error a mostrar  Ejemplo de uso :  bus . send ( error ,   Direcci\u00f3n de e-mail incorrecta );", 
            "title": "error"
        }, 
        {
            "location": "/ref/events/#modules-loaded", 
            "text": "Enviado una vez el m\u00f3dulo  customization  ha cargado todos los m\u00f3dulos especificados por el servidor.  Par\u00e1metros : Ninguno.", 
            "title": "modules-loaded"
        }, 
        {
            "location": "/ref/events/#show-wait-mask", 
            "text": "Muestra un indicador de que el sistema est\u00e1 ocupado y el usuario debe esperar  Par\u00e1metros : Texto informativo.  Ejemplo de uso :  bus . send ( show-wait-mask ,   Enviando informaci\u00f3n al servidor... );", 
            "title": "show-wait-mask"
        }, 
        {
            "location": "/ref/events/#hide-wait-mask", 
            "text": "Oculta el indicador mostrado por  show-wait-mask .  Par\u00e1metros : Ninguno  Ejemplo de uso :  bus . send ( hide-wait-mask );", 
            "title": "hide-wait-mask"
        }, 
        {
            "location": "/ref/events/#show-info", 
            "text": "Muestra una ventana emergente con determinada informaci\u00f3n que se pasa como par\u00e1metro.  Par\u00e1metros :   title : T\u00edtulo de la ventana.  link : Bien una url que apunta a la p\u00e1gina que se pretende mostrar, o un objeto jquery que ser\u00e1 mostrado en la ventana.  eventOptions : Opcional. Elemento con las opciones para la personalizaci\u00f3n de la ventana. Actualmente se utiliza FancyBox por lo que se puede a\u00f1adir cualquier opci\u00f3n v\u00e1lida de este framework.   Ejemplo de uso :  bus . send ( show-info ,   [   Mi info ,   http://ambiente.gob.am/portal/static/loc/es/html/doc.html   ]);", 
            "title": "show-info"
        }, 
        {
            "location": "/ref/events/#capas", 
            "text": "", 
            "title": "Capas"
        }, 
        {
            "location": "/ref/events/#before-adding-layers", 
            "text": "Enviado justo antes de que se empiecen a lanzar los eventos add-group y add-layer. Da la oportunidad a otros m\u00f3dulos de realizar operaciones previas a la carga de las capas.  Par\u00e1metros : Ninguno.", 
            "title": "before-adding-layers"
        }, 
        {
            "location": "/ref/events/#layers-loaded", 
            "text": "Enviado una vez el m\u00f3dulo  layers  ha lanzado los eventos  add-layer  y  add-group  correspondientes a la configuraci\u00f3n de capas existente en el servidor.  Par\u00e1metros : Ninguno", 
            "title": "layers-loaded"
        }, 
        {
            "location": "/ref/events/#reset-layers", 
            "text": "Se env\u00eda para resetear la configuraci\u00f3n de capas del portal.  Como norma general, cualquier m\u00f3dulo que escuche los eventos  add-layer ,  add-group  o  layers-loaded  tambi\u00e9n deber\u00e1 escuchar el evento  reset-layers , y devolver el estado interno del m\u00f3dulo (y del DOM) al que ten\u00eda justo antes de empezar a cargar grupos y capas.  Par\u00e1metros : Ninguno", 
            "title": "reset-layers"
        }, 
        {
            "location": "/ref/events/#add-group", 
            "text": "Indica que se debe a\u00f1adir un grupo al \u00e1rbol de capas.  Par\u00e1metros : Un objeto con las siguientes propiedades:   id : identificador del grupo  parentId : Opcional, para grupos dentro de otros grupos hace referencia al grupo contenedor  name : nombre del grupo  infoLink : Ruta de la p\u00e1gina HTML con informaci\u00f3n sobre el grupo   Ejemplo de uso :  bus . send ( add-group ,   [   { \n     id : grupo_admin , \n     name : L\u00edmites administrativos  }]);", 
            "title": "add-group"
        }, 
        {
            "location": "/ref/events/#add-layer", 
            "text": "Indica que se debe a\u00f1adir una capa a la aplicaci\u00f3n.  Par\u00e1metros : Un objeto con las siguientes propiedades:   id : id de la capa  groupId : id del grupo en el que se debe a\u00f1adir la capa  label : Texto con el nombre de la capa a usar en el portal  infoLink : Ruta de la p\u00e1gina HTML con informaci\u00f3n sobre la capa  inlineLegendUrl : URL con una imagen peque\u00f1a que situar al lado del nombre de la capa en el \u00e1rbol de capas  queryable : Si se pretende ofrecer herramienta de informaci\u00f3n para la capa o no  active : Si la capa est\u00e1 inicialmente visible o no   wmsLayers : Array con la informaci\u00f3n de las distintas capas WMS que se acceder\u00e1n desde esta capa. El caso m\u00e1s habitual es que se acceda s\u00f3lo a una, pero es posible configurar varias. Los objetos de este array tienen la siguiente estructura:   baseUrl : URL del servidor WMS que sirve la capa  wmsName : Nombre de la capa en el servicio WMS  imageFormat : Formato de imagen a utilizar en las llamadas WMS  zIndex : Posici\u00f3n en la pila de dibujado  legend : Nombre del fichero imagen con la leyenda de la capa. Estos ficheros se acceden en static/loc/{lang}/images  label : T\u00edtulo de la leyenda  sourceLink : URL del proveedor de los datos  sourceLabel : Texto con el que presentar el enlace especificado en sourceLink  timestamps : Array con los instantes de tiempo en ISO8601 para los que la capa tiene informaci\u00f3n     Ejemplo de uso :  bus . send ( add-layer ,   { \n     id   :   meteo-eeuu , \n     groupId   :   landcover , \n     label   :   Radar EEUU , \n     active   :   true , \n     wmsLayers   :   [   { \n         baseUrl   :   http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r-t.cgi , \n         wmsName   :   nexrad-n0r-wmst \n     }   ]  });", 
            "title": "add-layer"
        }, 
        {
            "location": "/ref/events/#layer-visibility", 
            "text": "Cambia la visibilidad de una capa.  Par\u00e1metros :   id de la capa portal.  valor de visibilidad.   Ejemplo de uso :  bus . send ( layer-visibility ,   [ provincias ,   false ]);", 
            "title": "layer-visibility"
        }, 
        {
            "location": "/ref/events/#show-layer-info", 
            "text": "Muestra la informaci\u00f3n asociada a una capa con su atributo  infoLink  o  infoFile .  Par\u00e1metros : identificador de la capa.  Ejemplo de uso :  bus . send ( show-layer-info ,   [   provincias   ]);", 
            "title": "show-layer-info"
        }, 
        {
            "location": "/ref/events/#show-group-info", 
            "text": "Muestra la informaci\u00f3n asociada a un grupo con su atributo  infoLink  o  infoFile .  Par\u00e1metros : identificador del grupo.  Ejemplo de uso :  bus . send ( show-group-info ,   [   base   ]);", 
            "title": "show-group-info"
        }, 
        {
            "location": "/ref/events/#time-sliderselection", 
            "text": "Lanzado cuando el usuario selecciona un instante temporal global distinto al actual. Generalmente se actualiza el mapa con la informaci\u00f3n de esa fecha.  Par\u00e1metros : objeto  Date  con el instante temporal seleccionado.  Ejemplo de uso :  var   d   =   new   Date ();  bus . send ( time-slider.selection ,   d );", 
            "title": "time-slider.selection"
        }, 
        {
            "location": "/ref/events/#layer-time-sliderselection", 
            "text": "Lanzado cuando el usuario selecciona un instante temporal espec\u00edfico para una capa (a diferencia del  time-slider.selection  cuyo instante es global para todas las capas).  Par\u00e1metros :   id de la portalLayer que ha determinado su instante temporal.  objeto Date con el instante temporal seleccionado   Ejemplo de uso :  var   d   =   new   Date ();  bus . send ( layer-time-slider.selection ,   [ mi-portal-layer ,   date ]);", 
            "title": "layer-time-slider.selection"
        }, 
        {
            "location": "/ref/events/#layer-timestamp-selected", 
            "text": "Una capa ha escuchado uno de los eventos de selecci\u00f3n temporal y ha determinado qu\u00e9 instancia temporal es la que m\u00e1s se ajusta a esa. La capa selecciona la \u00faltima instancia temporal que es menor o igual al instante seleccionado o la primera instancia si el instante seleccionado es anterior a todas sus instancias.  Par\u00e1metros :   id de la portalLayer que ha determinado su instante temporal.  objeto Date con el instante temporal seleccionado  cadena de car\u00e1cteres con el nombre del estilo que se debe usar para esta instancia temporal. Puede ser nulo si la capa no requiere un estilo distinto por instante.", 
            "title": "layer-timestamp-selected"
        }, 
        {
            "location": "/ref/events/#toggle-legend", 
            "text": "Escuchado por el m\u00f3dulo  legend-panel  para mostrar u ocultar el panel con la leyenda.  Par\u00e1metros : Ninguno  Ejemplo de uso :  bus . send ( toggle-legend );", 
            "title": "toggle-legend"
        }, 
        {
            "location": "/ref/events/#register-layer-action", 
            "text": "Escuchado por la lista de capas. Instala un bot\u00f3n a la derecha de las capas que realizar\u00e1 una acci\u00f3n al ser pulsado.  Par\u00e1metros : Funci\u00f3n que devuelve el objeto jQuery que se mostar\u00e1 a modo de bot\u00f3n. Esta funci\u00f3n toma como par\u00e1metro el mismo objeto que se lanza en el evento  add-layer .  Ejemplo de uso (bot\u00f3n de informaci\u00f3n) :  bus . listen ( before-adding-layers ,   function ()   { \n     var   showInfoAction   =   function ( portalLayer )   { \n         if   ( portalLayer . hasOwnProperty ( infoFile ))   { \n             aLink   =   $ ( a/ ). attr ( href ,   portalLayer . infoFile ); \n             aLink . addClass ( layer_info_button ); \n             aLink . fancybox ({ \n                 closeBtn   :   true , \n                 openEffect   :   elastic , \n                 closeEffect   :   elastic , \n                 type   :   iframe , \n                 overlayOpacity   :   0.5 \n             }); \n             return   aLink ; \n         }   else   { \n             return   null ; \n         } \n     }; \n     bus . send ( register-layer-action ,   showInfoAction );  });", 
            "title": "register-layer-action"
        }, 
        {
            "location": "/ref/events/#register-group-action", 
            "text": "Igual que  register-layer-action  pero para grupos.", 
            "title": "register-group-action"
        }, 
        {
            "location": "/ref/events/#show-layer-panel", 
            "text": "Activa el panel de capas indicado.  Par\u00e1metros : identificador del panel a activar. La lista de paneles puede variar en funci\u00f3n de los plugins que haya activados. La lista completa de ids es:   all_layers_selector .  layers_transparency_selector  layer_slider_selector  (s\u00f3lo con el plugin  layer-time-sliders ).   Ejemplo de uso :  bus . send ( show-layer-panel ,   [   layers_transparency_selector   ]);", 
            "title": "show-layer-panel"
        }, 
        {
            "location": "/ref/events/#mapa", 
            "text": "", 
            "title": "Mapa"
        }, 
        {
            "location": "/ref/events/#activate-exclusive-control", 
            "text": "Pide la activaci\u00f3n exclusiva del control que se pasa como par\u00e1metro y la desactivaci\u00f3n del control exclusivo que estuviera activado en el momento de lanzar el mensaje.  Par\u00e1metros : Un objeto con las siguientes propiedades:   controlIds : Array de identificadores de controles, creados con  map:createControl .   Ejemplo de uso :  define ([   ol2/controlRegistry   ],   function ( controlRegistry )   { \n   ... \n   controlRegistry . registerControl ( measure ,   function ( message )   { \n     return   new   OpenLayers . Control . Measure ( OpenLayers . Handler . Path ); \n   }); \n   bus . send ( map:createControl ,   { \n     controlId :   measure , \n     controlType :   measure \n   }); \n   bus . send ( activate-exclusive-control ,   { \n     controlIds :   [ measure ] \n   }); \n   ...  });", 
            "title": "activate-exclusive-control"
        }, 
        {
            "location": "/ref/events/#zoom-in", 
            "text": "Mueve la escala al nivel inmediatamente mayor.  Par\u00e1metros : Ninguno  Ejemplo de uso :  bus . send ( zoom-in );", 
            "title": "zoom-in"
        }, 
        {
            "location": "/ref/events/#zoom-out", 
            "text": "Mueve la escala al nivel inmediatamente menor  Par\u00e1metros : Ninguno  Ejemplo de uso :  bus . send ( zoom-out );", 
            "title": "zoom-out"
        }, 
        {
            "location": "/ref/events/#zoom-to", 
            "text": "Mueve el encuadre al objeto OpenLayers.Bounds que se pasa como par\u00e1metro. El objeto bounds debe estar en el sistema de referencia del mapa (EPSG:900913)  Par\u00e1metros : OpenLayers.Bounds con el extent deseado.  Ejemplo de uso :  var   bounds   =   new   OpenLayers . Bounds ();  bounds . extend ( new   OpenLayers . LonLat ( 0 , 42 ));  bounds . extend ( new   OpenLayers . LonLat ( 10 , 52 ));  bounds . transform (   new   OpenLayers . Projection ( EPSG:4326 ),   new   OpenLayers . Projection ( EPSG:900913 ));  bus . send ( zoom-to ,   bounds );", 
            "title": "zoom-to"
        }, 
        {
            "location": "/ref/events/#initial-zoom", 
            "text": "Situa el mapa en la posici\u00f3n inicial  Par\u00e1metros : Ninguno  Ejemplo de uso :  bus . send ( initial-zoom );", 
            "title": "initial-zoom"
        }, 
        {
            "location": "/ref/events/#set-default-exclusive-control", 
            "text": "Establece el control exclusivo por defecto para el mapa. S\u00f3lo un m\u00f3dulo exclusivo est\u00e1 activado en cada momento.  Par\u00e1metros : Objeto OpenLayers.Control.  Ejemplo de uso :  var   control   =   new   OpenLayers . Control . WMSGetFeatureInfo ({  ...  });  bus . send ( set-default-exclusive-control ,   [ control ]);", 
            "title": "set-default-exclusive-control"
        }, 
        {
            "location": "/ref/events/#activate-default-exclusive-control", 
            "text": "Activar el control establecido por defecto mediante el mensaje  set-default-exclusive-control  Par\u00e1metros : Ninguno.  Ejemplo de uso :  bus . send ( activate-default-exclusive-control );", 
            "title": "activate-default-exclusive-control"
        }, 
        {
            "location": "/ref/events/#info-features", 
            "text": "Resultados de la petici\u00f3n de informaci\u00f3n a una \u00fanica capa.  Par\u00e1metros :   wmsLayerId : Id de la capa a la que pertenecen las features.   features : array con las features OpenLayers. Cada feature tiene:    Una propiedad  aliases  que es un array que contiene un objeto con propiedades  name  y  alias  para cada atributo de la feature. Por ejemplo:  :::js\n[{\n  \"name\" : \"ident\",\n  \"alias\" : \"Id\"\n}, {\n  \"name\" : \"nprov\",\n  \"alias\" : \"Nombre\"\n}, {\n  \"name\" : \"pop96\",\n  \"alias\" : \"Poblaci\u00f3n (1996)\"\n}]    Una propiedad  bounds  con el bounding box de la geometr\u00eda de la feature o null si el servidor no la devolvi\u00f3. Siempre en EPSG:900913.   Una propiedad  highlightGeom  con la geometr\u00eda de la feature o el bounding box (en caso de que as\u00ed se configure en el  layers.json ) o  null  si el servidor no devolvi\u00f3 datos geom\u00e9tricos. Siempre en EPSG:900913.     x: Posici\u00f3n X en la que se hizo click para obtener la informaci\u00f3n   y: Posici\u00f3n Y en la que se hizo click para obtener la informaci\u00f3n   Ejemplo de uso :", 
            "title": "info-features"
        }, 
        {
            "location": "/ref/events/#highlight-feature", 
            "text": "Indica que se debe resaltar la geometr\u00eda que se pasa como par\u00e1metro  Par\u00e1metros : OpenLayers.Geometry", 
            "title": "highlight-feature"
        }, 
        {
            "location": "/ref/events/#clear-highlighted-features", 
            "text": "Indica que se deben de eliminar todos los resaltes establecidos mediante  highlight-feature .  Par\u00e1metros : Ninguno.", 
            "title": "clear-highlighted-features"
        }, 
        {
            "location": "/ref/events/#feedback", 
            "text": "", 
            "title": "Feedback"
        }, 
        {
            "location": "/ref/events/#activate-feedback", 
            "text": "Activa el modo feedback mostrando la ventana y seleccionando la herramienta para el dibujado del pol\u00edgono sobre el que se da el feedback.  Par\u00e1metros : Ninguno.  Ejemplo de uso :  bus . send ( activate-feedback );", 
            "title": "activate-feedback"
        }, 
        {
            "location": "/ref/events/#deactivate-feedback", 
            "text": "Desactiva el modo feedback, ocultando la ventana y volviendo a la herramienta por defecto (navegaci\u00f3n).  Par\u00e1metros : Ninguno.  Ejemplo de uso :  bus . send ( deactivate-feedback );", 
            "title": "deactivate-feedback"
        }, 
        {
            "location": "/ref/license/", 
            "text": "Geoladris tiene licencia \nMIT\n.", 
            "title": "Licencia"
        }
    ]
}